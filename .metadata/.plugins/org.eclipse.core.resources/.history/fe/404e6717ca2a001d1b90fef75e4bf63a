#include "stm32f1xx.h"
#include "i2c.h"

#define APB2_GPIOB	(1U<<3)
#define APB1_I2C1	(1U<<21)
#define PB6_CFG		(0xE<<24)
#define PB7_CFG		(0xE<<28)
#define CR1_SWRST	(1U<<15)
#define CR2_FREQ	(1U<<1) //2MHz
#define I2C_100KHz	0x24
#define SD_MODE_MAX_RISE_TIME	17
#define I2C_FS		(1U<<15)
#define CR1_PE		(1U<<0)
#define SR2_BUSY	(1U<<1)
#define CR1_START	(1U<<8)
#define I2C_SB		(1U<<0)
#define I2C1_ADDRF	(1U<<1)
#define SR1_TxE		(1U<<7)
#define CR1_ACK		(1U<<10)
#define CR1_STOP	(1U<<9)
#define SR1_RxNE	(1U<<6)
#define SR1_BTF		(1U<<2)

//	PB6 -> I2C1_SCL
//	PB7 -> I2C1_SDA
void I2C1_init(void){
//	enable clock access to GPIOB
	RCC->APB2ENR |= APB2_GPIOB;
//	enable clock access to I2C1
	RCC->APB1ENR |= APB1_I2C1;
//	set pins to output-alternate function open-drain
	GPIOB->CRL = (GPIOB->CRL | PB6_CFG | PB7_CFG);
//	i2c out of reset state
	I2C1->CR1 &=~ CR1_SWRST;
//	I2C clock conf
	I2C1->CR2 |= CR2_FREQ;
	I2C1->CCR |= I2C_100KHz;
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
	I2C1->CR1 |= CR1_PE;
}

void I2C1_byteRead(char saddr, char maddr, char* data){
	volatile int tmp;
	while(I2C1->CR2 & SR2_BUSY);
	I2C1->CR1 |= CR1_START;
	while(!(I2C1->SR1 & I2C_SB));
//	transmit slave address + write
	I2C1->DR = saddr << 1;
	while(!(I2C1->SR1 & I2C1_ADDRF));
	tmp = I2C1->SR2;
//	send memory address
	I2C1->DR = maddr;
	while(!(I2C1->SR1 & SR1_TxE));
//	restart condition
	I2C1->CR1 |= CR1_START;
	while(!(I2C1->SR1 & I2C_SB));
//	transmit slave address + read
	I2C1->DR = saddr << 1 | 1;
//	Wait until addr flag is set
	while(!(I2C1->SR1 & I2C1_ADDRF));
	I2C1->CR1 &=~ CR1_ACK;
	tmp = I2C1->SR2;
	I2C1->CR1 |= CR1_STOP;
	while(!(I2C1->SR1 & SR1_RxNE));
	*data++ = I2C1->DR;
}

void I2C1_burstRead(char saddr, char maddr, int n, char* data){
	volatile int tmp;
	while(I2C1->CR2 & SR2_BUSY);
	I2C1->CR1 |= CR1_START;
	while(!(I2C1->SR1 & I2C_SB));
	//	transmit slave address + write
	I2C1->DR = saddr << 1;
	while(!(I2C1->SR1 & I2C1_ADDRF));
	tmp = I2C1->SR2;
	while(!(I2C1->SR1 & SR1_TxE));
	I2C1->DR = maddr;
	while(!(I2C1->SR1 & SR1_TxE));
	I2C1->CR1 |= CR1_START;
	while(!(I2C1->SR1 & I2C_SB));
	I2C1->DR = saddr << 1 | 1;
	while(!(I2C1->SR1 & I2C1_ADDRF));
	tmp = I2C1->SR2;
	I2C1->CR1 |= CR1_ACK;
	while(n > 0U){
		if(n == 1U){
			I2C1->CR1 &=~ CR1_ACK;
			I2C1->CR1 |= CR1_STOP;
			while(!(I2C1->SR1 & SR1_RxNE));
			*data++ = I2C1->DR;
			break;
		}
		while(!(I2C1->SR1 & SR1_RxNE));
		*data++ = I2C1->DR;
		n--;
	}
}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data){
	volatile int tmp;
	while(I2C1->CR2 & SR2_BUSY);
	I2C1->CR1 |= CR1_START;
	while(!(I2C1->SR1 & I2C_SB));
	I2C1->DR = saddr << 1;
	while(!(I2C1->SR1 & I2C1_ADDRF));
	tmp = I2C1->SR2;
	while(!(I2C1->SR1 & SR1_TxE));
	I2C1->DR = maddr;
	for(int i = 0; i < n; i++){
		while(!(I2C1->SR1 & SR1_TxE));
		I2C1->DR = *data++;
	}

}





