
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00010368  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000368  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000368  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000368  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010368  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000055e  00000000  00000000  00010391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023e  00000000  00000000  000108ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c06  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d32  00000000  00000000  0002183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056f20  00000000  00000000  00022570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00079490  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  000794e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000348 	.word	0x08000348

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000348 	.word	0x08000348

08000170 <main>:
#define GPIOCEN (1U<<4)
#define PIN13 (1U<<13)

char key;

int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= GPIOCEN;
 8000174:	4b16      	ldr	r3, [pc, #88]	; (80001d0 <main+0x60>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a15      	ldr	r2, [pc, #84]	; (80001d0 <main+0x60>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6193      	str	r3, [r2, #24]
	GPIOC->CRH = (GPIOC->CRH &~(1U<<23))&~(1U<<22);
 8000180:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <main+0x64>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a13      	ldr	r2, [pc, #76]	; (80001d4 <main+0x64>)
 8000186:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800018a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH = (GPIOC->CRH |(1U<<21))&~(1U<<20);
 800018c:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <main+0x64>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000194:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <main+0x64>)
 8000196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800019a:	6053      	str	r3, [r2, #4]

	uart2_rxtx_init();
 800019c:	f000 f81e 	bl	80001dc <uart2_rxtx_init>

	while(1){
		key = uart2_read();
 80001a0:	f000 f84e 	bl	8000240 <uart2_read>
 80001a4:	4603      	mov	r3, r0
 80001a6:	461a      	mov	r2, r3
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <main+0x68>)
 80001aa:	701a      	strb	r2, [r3, #0]
		if(key == '1'){
 80001ac:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <main+0x68>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b31      	cmp	r3, #49	; 0x31
 80001b2:	d106      	bne.n	80001c2 <main+0x52>
			GPIOC->ODR |= PIN13;
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <main+0x64>)
 80001b6:	68db      	ldr	r3, [r3, #12]
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <main+0x64>)
 80001ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001be:	60d3      	str	r3, [r2, #12]
 80001c0:	e7ee      	b.n	80001a0 <main+0x30>
		}else{
			GPIOC->ODR &= ~PIN13;
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <main+0x64>)
 80001c4:	68db      	ldr	r3, [r3, #12]
 80001c6:	4a03      	ldr	r2, [pc, #12]	; (80001d4 <main+0x64>)
 80001c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001cc:	60d3      	str	r3, [r2, #12]
		key = uart2_read();
 80001ce:	e7e7      	b.n	80001a0 <main+0x30>
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40011000 	.word	0x40011000
 80001d8:	2000001c 	.word	0x2000001c

080001dc <uart2_rxtx_init>:
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
	//configure transfer direction
	USART2->CR1 = CR1_UE | CR1_TE; // Transmitter enable, Enable USART
}

void uart2_rxtx_init(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Config uart gpio pin
	//1.Enable clock access to gpio C
	RCC->APB2ENR |= GPIOAEN; // clock enabled
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <uart2_rxtx_init+0x54>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a12      	ldr	r2, [pc, #72]	; (8000230 <uart2_rxtx_init+0x54>)
 80001e6:	f043 0304 	orr.w	r3, r3, #4
 80001ea:	6193      	str	r3, [r2, #24]

	//2.Set PA2 mode to alternate function mode
	GPIOA->CRL = (GPIOA->CRL |(1U<<9)|(1U<<8)|(1U<<11))&~(1U<<10); //output 50 mhz max
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <uart2_rxtx_init+0x58>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80001f4:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <uart2_rxtx_init+0x58>)
 80001f6:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 80001fa:	6013      	str	r3, [r2, #0]
	//3.Set PA2 alternate func mode to UART_TX
	//by default

	//1.Set PA3 mode to alternative function
	GPIOA->CRL = (GPIOA->CRL |(1U<<13)|(1U<<12)|(1U<<15))&~(1U<<14);
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <uart2_rxtx_init+0x58>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <uart2_rxtx_init+0x58>)
 8000206:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 800020a:	6013      	str	r3, [r2, #0]

	//Config uart module
	//enable clock access to uart2
	RCC->APB1ENR |= USART2EN;
 800020c:	4b08      	ldr	r3, [pc, #32]	; (8000230 <uart2_rxtx_init+0x54>)
 800020e:	69db      	ldr	r3, [r3, #28]
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <uart2_rxtx_init+0x54>)
 8000212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000216:	61d3      	str	r3, [r2, #28]
	//Configure uart boudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800021c:	4906      	ldr	r1, [pc, #24]	; (8000238 <uart2_rxtx_init+0x5c>)
 800021e:	4807      	ldr	r0, [pc, #28]	; (800023c <uart2_rxtx_init+0x60>)
 8000220:	f000 f820 	bl	8000264 <uart_set_baudrate>
	//configure transfer direction
	USART2->CR1 = CR1_UE | CR1_TE | CR1_RE; // Transmitter enable, Enable USART
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <uart2_rxtx_init+0x60>)
 8000226:	f242 020c 	movw	r2, #8204	; 0x200c
 800022a:	60da      	str	r2, [r3, #12]
}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	40021000 	.word	0x40021000
 8000234:	40010800 	.word	0x40010800
 8000238:	007a1200 	.word	0x007a1200
 800023c:	40004400 	.word	0x40004400

08000240 <uart2_read>:
	while(!(USART2->SR & SR_TXE));
	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
}

char uart2_read(void){
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	while(!(USART2->SR & SR_RXNE));
 8000244:	bf00      	nop
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <uart2_read+0x20>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f003 0320 	and.w	r3, r3, #32
 800024e:	2b00      	cmp	r3, #0
 8000250:	d0f9      	beq.n	8000246 <uart2_read+0x6>
	return USART2->DR;
 8000252:	4b03      	ldr	r3, [pc, #12]	; (8000260 <uart2_read+0x20>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	b2db      	uxtb	r3, r3
}
 8000258:	4618      	mov	r0, r3
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	40004400 	.word	0x40004400

08000264 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BoudRate){
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BoudRate);
 8000270:	6879      	ldr	r1, [r7, #4]
 8000272:	68b8      	ldr	r0, [r7, #8]
 8000274:	f000 f808 	bl	8000288 <compute_uart_div>
 8000278:	4603      	mov	r3, r0
 800027a:	461a      	mov	r2, r3
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	609a      	str	r2, [r3, #8]
}
 8000280:	bf00      	nop
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate){
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	085a      	lsrs	r2, r3, #1
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	441a      	add	r2, r3
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a0:	b29b      	uxth	r3, r3
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff47 	bl	8000170 <main>

080002e2 <LoopForever>:

LoopForever:
    b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	20000020 	.word	0x20000020

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	2600      	movs	r6, #0
 8000304:	4d0c      	ldr	r5, [pc, #48]	; (8000338 <__libc_init_array+0x38>)
 8000306:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000308:	1b64      	subs	r4, r4, r5
 800030a:	10a4      	asrs	r4, r4, #2
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	f000 f81a 	bl	8000348 <_init>
 8000314:	2600      	movs	r6, #0
 8000316:	4d0a      	ldr	r5, [pc, #40]	; (8000340 <__libc_init_array+0x40>)
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <__libc_init_array+0x44>)
 800031a:	1b64      	subs	r4, r4, r5
 800031c:	10a4      	asrs	r4, r4, #2
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
