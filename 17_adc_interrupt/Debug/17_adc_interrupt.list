
17_adc_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001364  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001494  08001494  00011494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001540  08001540  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001540  08001540  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001540  08001540  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001540  08001540  00011540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001544  08001544  00011544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  080015ac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080015ac  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013c2  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000068b  00000000  00000000  0002144f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00021ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  00021c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b25  00000000  00000000  00021de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fa0  00000000  00000000  0003390d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058b3b  00000000  00000000  000358ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e3e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d48  00000000  00000000  0008e438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	0800147c 	.word	0x0800147c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	0800147c 	.word	0x0800147c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <pa1_adc_interrupt_init>:
//	Configure adc parameters
	ADC1->CR2 |= (SWSTARTON|CR2_ADON|EXTTRIG);

}

void pa1_adc_interrupt_init(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
//	enable clock access to port A
//	Enable clock access to adc
	RCC->APB2ENR = (RCC->APB2ENR | GPIOAEN | ADC1EN);
 80001ac:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <pa1_adc_interrupt_init+0x50>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a11      	ldr	r2, [pc, #68]	; (80001f8 <pa1_adc_interrupt_init+0x50>)
 80001b2:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 80001b6:	6193      	str	r3, [r2, #24]
// Set PA1 to analog mode
	GPIOA->CRL = (GPIOA->CRL &~ ((1U<<5)|(1U<<4)|(1U<<7)|(1U<<6)));
 80001b8:	4b10      	ldr	r3, [pc, #64]	; (80001fc <pa1_adc_interrupt_init+0x54>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a0f      	ldr	r2, [pc, #60]	; (80001fc <pa1_adc_interrupt_init+0x54>)
 80001be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001c2:	6013      	str	r3, [r2, #0]
//	Configure sequence start
	ADC1->SQR3 = ADC_CH1;
 80001c4:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <pa1_adc_interrupt_init+0x58>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	635a      	str	r2, [r3, #52]	; 0x34
//	Configure sequence length
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80001ca:	4b0d      	ldr	r3, [pc, #52]	; (8000200 <pa1_adc_interrupt_init+0x58>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	62da      	str	r2, [r3, #44]	; 0x2c
//	Configure adc parameters
	ADC1->CR1 |= CR1_EOCIE;
 80001d0:	4b0b      	ldr	r3, [pc, #44]	; (8000200 <pa1_adc_interrupt_init+0x58>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	4a0a      	ldr	r2, [pc, #40]	; (8000200 <pa1_adc_interrupt_init+0x58>)
 80001d6:	f043 0320 	orr.w	r3, r3, #32
 80001da:	6053      	str	r3, [r2, #4]
	NVIC_EnableIRQ(ADC1_2_IRQn);
 80001dc:	2012      	movs	r0, #18
 80001de:	f7ff ffc7 	bl	8000170 <__NVIC_EnableIRQ>
	ADC1->CR2 |= (SWSTARTON|CR2_ADON|EXTTRIG);
 80001e2:	4b07      	ldr	r3, [pc, #28]	; (8000200 <pa1_adc_interrupt_init+0x58>)
 80001e4:	689b      	ldr	r3, [r3, #8]
 80001e6:	4a06      	ldr	r2, [pc, #24]	; (8000200 <pa1_adc_interrupt_init+0x58>)
 80001e8:	f443 13f0 	orr.w	r3, r3, #1966080	; 0x1e0000
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6093      	str	r3, [r2, #8]

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40021000 	.word	0x40021000
 80001fc:	40010800 	.word	0x40010800
 8000200:	40012400 	.word	0x40012400

08000204 <start_conversion>:

void start_conversion(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	ADC1->CR2 |= (CR2_SWSTART|CR2_CONT);
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <start_conversion+0x1c>)
 800020a:	689b      	ldr	r3, [r3, #8]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <start_conversion+0x1c>)
 800020e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	6093      	str	r3, [r2, #8]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	40012400 	.word	0x40012400

08000224 <main>:
#include "uart.h"
#include "adc.h"

uint32_t sensor_value;

int main(void){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0

	uart2_tx_init();
 8000228:	f000 f8d4 	bl	80003d4 <uart2_tx_init>
	pa1_adc_interrupt_init();
 800022c:	f7ff ffbc 	bl	80001a8 <pa1_adc_interrupt_init>
	start_conversion();
 8000230:	f7ff ffe8 	bl	8000204 <start_conversion>
	while(1){
 8000234:	e7fe      	b.n	8000234 <main+0x10>
	...

08000238 <adc_callback>:

	}

}

static void adc_callback(void){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	printf("Sensor value: %d \n\r", (int)(ADC1->DR));
 800023c:	4b03      	ldr	r3, [pc, #12]	; (800024c <adc_callback+0x14>)
 800023e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000240:	4619      	mov	r1, r3
 8000242:	4803      	ldr	r0, [pc, #12]	; (8000250 <adc_callback+0x18>)
 8000244:	f000 f986 	bl	8000554 <iprintf>
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40012400 	.word	0x40012400
 8000250:	08001494 	.word	0x08001494

08000254 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
//	Check for eoc in SR
	if(ADC1->SR & SR_EOC){
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <ADC1_2_IRQHandler+0x24>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d007      	beq.n	8000274 <ADC1_2_IRQHandler+0x20>
		ADC1->SR &=~ SR_EOC;
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <ADC1_2_IRQHandler+0x24>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <ADC1_2_IRQHandler+0x24>)
 800026a:	f023 0302 	bic.w	r3, r3, #2
 800026e:	6013      	str	r3, [r2, #0]
		adc_callback();
 8000270:	f7ff ffe2 	bl	8000238 <adc_callback>
	}
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40012400 	.word	0x40012400

0800027c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]
 800028c:	e00a      	b.n	80002a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800028e:	f3af 8000 	nop.w
 8000292:	4601      	mov	r1, r0
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	1c5a      	adds	r2, r3, #1
 8000298:	60ba      	str	r2, [r7, #8]
 800029a:	b2ca      	uxtb	r2, r1
 800029c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	3301      	adds	r3, #1
 80002a2:	617b      	str	r3, [r7, #20]
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	dbf0      	blt.n	800028e <_read+0x12>
	}

return len;
 80002ac:	687b      	ldr	r3, [r7, #4]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3718      	adds	r7, #24
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}

080002b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	b086      	sub	sp, #24
 80002ba:	af00      	add	r7, sp, #0
 80002bc:	60f8      	str	r0, [r7, #12]
 80002be:	60b9      	str	r1, [r7, #8]
 80002c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]
 80002c6:	e009      	b.n	80002dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	1c5a      	adds	r2, r3, #1
 80002cc:	60ba      	str	r2, [r7, #8]
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f873 	bl	80003bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	3301      	adds	r3, #1
 80002da:	617b      	str	r3, [r7, #20]
 80002dc:	697a      	ldr	r2, [r7, #20]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	dbf1      	blt.n	80002c8 <_write+0x12>
	}
	return len;
 80002e4:	687b      	ldr	r3, [r7, #4]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}

080002ee <_close>:

int _close(int file)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
	return -1;
 80002f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000314:	605a      	str	r2, [r3, #4]
	return 0;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <_isatty>:

int _isatty(int file)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
	return 1;
 800032a:	2301      	movs	r3, #1
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr

08000336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000336:	b480      	push	{r7}
 8000338:	b085      	sub	sp, #20
 800033a:	af00      	add	r7, sp, #0
 800033c:	60f8      	str	r0, [r7, #12]
 800033e:	60b9      	str	r1, [r7, #8]
 8000340:	607a      	str	r2, [r7, #4]
	return 0;
 8000342:	2300      	movs	r3, #0
}
 8000344:	4618      	mov	r0, r3
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	bc80      	pop	{r7}
 800034c:	4770      	bx	lr
	...

08000350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000358:	4a14      	ldr	r2, [pc, #80]	; (80003ac <_sbrk+0x5c>)
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <_sbrk+0x60>)
 800035c:	1ad3      	subs	r3, r2, r3
 800035e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <_sbrk+0x64>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d102      	bne.n	8000372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <_sbrk+0x64>)
 800036e:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <_sbrk+0x68>)
 8000370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000372:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <_sbrk+0x64>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4413      	add	r3, r2
 800037a:	693a      	ldr	r2, [r7, #16]
 800037c:	429a      	cmp	r2, r3
 800037e:	d207      	bcs.n	8000390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000380:	f000 f8b6 	bl	80004f0 <__errno>
 8000384:	4603      	mov	r3, r0
 8000386:	220c      	movs	r2, #12
 8000388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	e009      	b.n	80003a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <_sbrk+0x64>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <_sbrk+0x64>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <_sbrk+0x64>)
 80003a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003a2:	68fb      	ldr	r3, [r7, #12]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3718      	adds	r7, #24
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20005000 	.word	0x20005000
 80003b0:	00000400 	.word	0x00000400
 80003b4:	20000080 	.word	0x20000080
 80003b8:	20000098 	.word	0x20000098

080003bc <__io_putchar>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BoudRate);
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BoudRate);
void uart2_write(int ch);

int __io_putchar(int ch){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f000 f82f 	bl	8000428 <uart2_write>
	return ch;
 80003ca:	687b      	ldr	r3, [r7, #4]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <uart2_tx_init>:


void uart2_tx_init(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	//Config uart gpio pin
	//1.Enable clock access to gpio C
	RCC->APB2ENR |= GPIOAEN; // clock enabled
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <uart2_tx_init+0x44>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <uart2_tx_init+0x44>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]

	//2.Set PA2 mode to alternate function mode
	GPIOA->CRL = (GPIOA->CRL |(1U<<9)|(1U<<8)|(1U<<11))&~(1U<<10); //output 50 mhz max
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <uart2_tx_init+0x48>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003ec:	4a0b      	ldr	r2, [pc, #44]	; (800041c <uart2_tx_init+0x48>)
 80003ee:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 80003f2:	6013      	str	r3, [r2, #0]
	//by default


	//Config uart module
	//enable clock access to uart2
	RCC->APB1ENR |= USART2EN;
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <uart2_tx_init+0x44>)
 80003f6:	69db      	ldr	r3, [r3, #28]
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <uart2_tx_init+0x44>)
 80003fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003fe:	61d3      	str	r3, [r2, #28]
	//Configure uart boudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000404:	4906      	ldr	r1, [pc, #24]	; (8000420 <uart2_tx_init+0x4c>)
 8000406:	4807      	ldr	r0, [pc, #28]	; (8000424 <uart2_tx_init+0x50>)
 8000408:	f000 f824 	bl	8000454 <uart_set_baudrate>
	//configure transfer direction
	USART2->CR1 = CR1_UE | CR1_TE; // Transmitter enable, Enable USART
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <uart2_tx_init+0x50>)
 800040e:	f242 0208 	movw	r2, #8200	; 0x2008
 8000412:	60da      	str	r2, [r3, #12]
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000
 800041c:	40010800 	.word	0x40010800
 8000420:	007a1200 	.word	0x007a1200
 8000424:	40004400 	.word	0x40004400

08000428 <uart2_write>:
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
	//configure transfer direction
	USART2->CR1 = CR1_UE | CR1_TE | CR1_RE; // Transmitter enable, Enable USART
}

void uart2_write(int ch){
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	//Make sure transmit data register is empty
	while(!(USART2->SR & SR_TXE));
 8000430:	bf00      	nop
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <uart2_write+0x28>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <uart2_write+0xa>
	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a03      	ldr	r2, [pc, #12]	; (8000450 <uart2_write+0x28>)
 8000442:	b2db      	uxtb	r3, r3
 8000444:	6053      	str	r3, [r2, #4]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40004400 	.word	0x40004400

08000454 <uart_set_baudrate>:
char uart2_read(void){
	while(!(USART2->SR & SR_RXNE));
	return USART2->DR;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BoudRate){
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BoudRate);
 8000460:	6879      	ldr	r1, [r7, #4]
 8000462:	68b8      	ldr	r0, [r7, #8]
 8000464:	f000 f808 	bl	8000478 <compute_uart_div>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	609a      	str	r2, [r3, #8]
}
 8000470:	bf00      	nop
 8000472:	3710      	adds	r7, #16
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate){
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	085a      	lsrs	r2, r3, #1
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	441a      	add	r2, r3
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000490:	b29b      	uxth	r3, r3
}
 8000492:	4618      	mov	r0, r3
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800049c:	480d      	ldr	r0, [pc, #52]	; (80004d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a6:	490d      	ldr	r1, [pc, #52]	; (80004dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <LoopForever+0xe>)
  movs r3, #0
 80004aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ac:	e002      	b.n	80004b4 <LoopCopyDataInit>

080004ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b2:	3304      	adds	r3, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b8:	d3f9      	bcc.n	80004ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ba:	4a0a      	ldr	r2, [pc, #40]	; (80004e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <LoopForever+0x16>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c0:	e001      	b.n	80004c6 <LoopFillZerobss>

080004c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c4:	3204      	adds	r2, #4

080004c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c8:	d3fb      	bcc.n	80004c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ca:	f000 f817 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ce:	f7ff fea9 	bl	8000224 <main>

080004d2 <LoopForever>:

LoopForever:
    b LoopForever
 80004d2:	e7fe      	b.n	80004d2 <LoopForever>
  ldr   r0, =_estack
 80004d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004dc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004e0:	08001548 	.word	0x08001548
  ldr r2, =_sbss
 80004e4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004e8:	20000094 	.word	0x20000094

080004ec <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004ec:	e7fe      	b.n	80004ec <ADC3_IRQHandler>
	...

080004f0 <__errno>:
 80004f0:	4b01      	ldr	r3, [pc, #4]	; (80004f8 <__errno+0x8>)
 80004f2:	6818      	ldr	r0, [r3, #0]
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000000 	.word	0x20000000

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2600      	movs	r6, #0
 8000500:	4d0c      	ldr	r5, [pc, #48]	; (8000534 <__libc_init_array+0x38>)
 8000502:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <__libc_init_array+0x3c>)
 8000504:	1b64      	subs	r4, r4, r5
 8000506:	10a4      	asrs	r4, r4, #2
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	f000 ffb6 	bl	800147c <_init>
 8000510:	2600      	movs	r6, #0
 8000512:	4d0a      	ldr	r5, [pc, #40]	; (800053c <__libc_init_array+0x40>)
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <__libc_init_array+0x44>)
 8000516:	1b64      	subs	r4, r4, r5
 8000518:	10a4      	asrs	r4, r4, #2
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	08001540 	.word	0x08001540
 8000538:	08001540 	.word	0x08001540
 800053c:	08001540 	.word	0x08001540
 8000540:	08001544 	.word	0x08001544

08000544 <memset>:
 8000544:	4603      	mov	r3, r0
 8000546:	4402      	add	r2, r0
 8000548:	4293      	cmp	r3, r2
 800054a:	d100      	bne.n	800054e <memset+0xa>
 800054c:	4770      	bx	lr
 800054e:	f803 1b01 	strb.w	r1, [r3], #1
 8000552:	e7f9      	b.n	8000548 <memset+0x4>

08000554 <iprintf>:
 8000554:	b40f      	push	{r0, r1, r2, r3}
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <iprintf+0x2c>)
 8000558:	b513      	push	{r0, r1, r4, lr}
 800055a:	681c      	ldr	r4, [r3, #0]
 800055c:	b124      	cbz	r4, 8000568 <iprintf+0x14>
 800055e:	69a3      	ldr	r3, [r4, #24]
 8000560:	b913      	cbnz	r3, 8000568 <iprintf+0x14>
 8000562:	4620      	mov	r0, r4
 8000564:	f000 f866 	bl	8000634 <__sinit>
 8000568:	ab05      	add	r3, sp, #20
 800056a:	4620      	mov	r0, r4
 800056c:	9a04      	ldr	r2, [sp, #16]
 800056e:	68a1      	ldr	r1, [r4, #8]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	f000 f9bb 	bl	80008ec <_vfiprintf_r>
 8000576:	b002      	add	sp, #8
 8000578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800057c:	b004      	add	sp, #16
 800057e:	4770      	bx	lr
 8000580:	20000000 	.word	0x20000000

08000584 <std>:
 8000584:	2300      	movs	r3, #0
 8000586:	b510      	push	{r4, lr}
 8000588:	4604      	mov	r4, r0
 800058a:	e9c0 3300 	strd	r3, r3, [r0]
 800058e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000592:	6083      	str	r3, [r0, #8]
 8000594:	8181      	strh	r1, [r0, #12]
 8000596:	6643      	str	r3, [r0, #100]	; 0x64
 8000598:	81c2      	strh	r2, [r0, #14]
 800059a:	6183      	str	r3, [r0, #24]
 800059c:	4619      	mov	r1, r3
 800059e:	2208      	movs	r2, #8
 80005a0:	305c      	adds	r0, #92	; 0x5c
 80005a2:	f7ff ffcf 	bl	8000544 <memset>
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <std+0x38>)
 80005a8:	6224      	str	r4, [r4, #32]
 80005aa:	6263      	str	r3, [r4, #36]	; 0x24
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <std+0x3c>)
 80005ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <std+0x40>)
 80005b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <std+0x44>)
 80005b6:	6323      	str	r3, [r4, #48]	; 0x30
 80005b8:	bd10      	pop	{r4, pc}
 80005ba:	bf00      	nop
 80005bc:	08000e99 	.word	0x08000e99
 80005c0:	08000ebb 	.word	0x08000ebb
 80005c4:	08000ef3 	.word	0x08000ef3
 80005c8:	08000f17 	.word	0x08000f17

080005cc <_cleanup_r>:
 80005cc:	4901      	ldr	r1, [pc, #4]	; (80005d4 <_cleanup_r+0x8>)
 80005ce:	f000 b8af 	b.w	8000730 <_fwalk_reent>
 80005d2:	bf00      	nop
 80005d4:	080011e9 	.word	0x080011e9

080005d8 <__sfmoreglue>:
 80005d8:	2268      	movs	r2, #104	; 0x68
 80005da:	b570      	push	{r4, r5, r6, lr}
 80005dc:	1e4d      	subs	r5, r1, #1
 80005de:	4355      	muls	r5, r2
 80005e0:	460e      	mov	r6, r1
 80005e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80005e6:	f000 f8e5 	bl	80007b4 <_malloc_r>
 80005ea:	4604      	mov	r4, r0
 80005ec:	b140      	cbz	r0, 8000600 <__sfmoreglue+0x28>
 80005ee:	2100      	movs	r1, #0
 80005f0:	e9c0 1600 	strd	r1, r6, [r0]
 80005f4:	300c      	adds	r0, #12
 80005f6:	60a0      	str	r0, [r4, #8]
 80005f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80005fc:	f7ff ffa2 	bl	8000544 <memset>
 8000600:	4620      	mov	r0, r4
 8000602:	bd70      	pop	{r4, r5, r6, pc}

08000604 <__sfp_lock_acquire>:
 8000604:	4801      	ldr	r0, [pc, #4]	; (800060c <__sfp_lock_acquire+0x8>)
 8000606:	f000 b8b3 	b.w	8000770 <__retarget_lock_acquire_recursive>
 800060a:	bf00      	nop
 800060c:	20000085 	.word	0x20000085

08000610 <__sfp_lock_release>:
 8000610:	4801      	ldr	r0, [pc, #4]	; (8000618 <__sfp_lock_release+0x8>)
 8000612:	f000 b8ae 	b.w	8000772 <__retarget_lock_release_recursive>
 8000616:	bf00      	nop
 8000618:	20000085 	.word	0x20000085

0800061c <__sinit_lock_acquire>:
 800061c:	4801      	ldr	r0, [pc, #4]	; (8000624 <__sinit_lock_acquire+0x8>)
 800061e:	f000 b8a7 	b.w	8000770 <__retarget_lock_acquire_recursive>
 8000622:	bf00      	nop
 8000624:	20000086 	.word	0x20000086

08000628 <__sinit_lock_release>:
 8000628:	4801      	ldr	r0, [pc, #4]	; (8000630 <__sinit_lock_release+0x8>)
 800062a:	f000 b8a2 	b.w	8000772 <__retarget_lock_release_recursive>
 800062e:	bf00      	nop
 8000630:	20000086 	.word	0x20000086

08000634 <__sinit>:
 8000634:	b510      	push	{r4, lr}
 8000636:	4604      	mov	r4, r0
 8000638:	f7ff fff0 	bl	800061c <__sinit_lock_acquire>
 800063c:	69a3      	ldr	r3, [r4, #24]
 800063e:	b11b      	cbz	r3, 8000648 <__sinit+0x14>
 8000640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000644:	f7ff bff0 	b.w	8000628 <__sinit_lock_release>
 8000648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800064c:	6523      	str	r3, [r4, #80]	; 0x50
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <__sinit+0x68>)
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <__sinit+0x6c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	62a2      	str	r2, [r4, #40]	; 0x28
 8000656:	42a3      	cmp	r3, r4
 8000658:	bf08      	it	eq
 800065a:	2301      	moveq	r3, #1
 800065c:	4620      	mov	r0, r4
 800065e:	bf08      	it	eq
 8000660:	61a3      	streq	r3, [r4, #24]
 8000662:	f000 f81f 	bl	80006a4 <__sfp>
 8000666:	6060      	str	r0, [r4, #4]
 8000668:	4620      	mov	r0, r4
 800066a:	f000 f81b 	bl	80006a4 <__sfp>
 800066e:	60a0      	str	r0, [r4, #8]
 8000670:	4620      	mov	r0, r4
 8000672:	f000 f817 	bl	80006a4 <__sfp>
 8000676:	2200      	movs	r2, #0
 8000678:	2104      	movs	r1, #4
 800067a:	60e0      	str	r0, [r4, #12]
 800067c:	6860      	ldr	r0, [r4, #4]
 800067e:	f7ff ff81 	bl	8000584 <std>
 8000682:	2201      	movs	r2, #1
 8000684:	2109      	movs	r1, #9
 8000686:	68a0      	ldr	r0, [r4, #8]
 8000688:	f7ff ff7c 	bl	8000584 <std>
 800068c:	2202      	movs	r2, #2
 800068e:	2112      	movs	r1, #18
 8000690:	68e0      	ldr	r0, [r4, #12]
 8000692:	f7ff ff77 	bl	8000584 <std>
 8000696:	2301      	movs	r3, #1
 8000698:	61a3      	str	r3, [r4, #24]
 800069a:	e7d1      	b.n	8000640 <__sinit+0xc>
 800069c:	080014a8 	.word	0x080014a8
 80006a0:	080005cd 	.word	0x080005cd

080006a4 <__sfp>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	4607      	mov	r7, r0
 80006a8:	f7ff ffac 	bl	8000604 <__sfp_lock_acquire>
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <__sfp+0x84>)
 80006ae:	681e      	ldr	r6, [r3, #0]
 80006b0:	69b3      	ldr	r3, [r6, #24]
 80006b2:	b913      	cbnz	r3, 80006ba <__sfp+0x16>
 80006b4:	4630      	mov	r0, r6
 80006b6:	f7ff ffbd 	bl	8000634 <__sinit>
 80006ba:	3648      	adds	r6, #72	; 0x48
 80006bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	d503      	bpl.n	80006cc <__sfp+0x28>
 80006c4:	6833      	ldr	r3, [r6, #0]
 80006c6:	b30b      	cbz	r3, 800070c <__sfp+0x68>
 80006c8:	6836      	ldr	r6, [r6, #0]
 80006ca:	e7f7      	b.n	80006bc <__sfp+0x18>
 80006cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80006d0:	b9d5      	cbnz	r5, 8000708 <__sfp+0x64>
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <__sfp+0x88>)
 80006d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006d8:	60e3      	str	r3, [r4, #12]
 80006da:	6665      	str	r5, [r4, #100]	; 0x64
 80006dc:	f000 f847 	bl	800076e <__retarget_lock_init_recursive>
 80006e0:	f7ff ff96 	bl	8000610 <__sfp_lock_release>
 80006e4:	2208      	movs	r2, #8
 80006e6:	4629      	mov	r1, r5
 80006e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80006ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80006f0:	6025      	str	r5, [r4, #0]
 80006f2:	61a5      	str	r5, [r4, #24]
 80006f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80006f8:	f7ff ff24 	bl	8000544 <memset>
 80006fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000704:	4620      	mov	r0, r4
 8000706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000708:	3468      	adds	r4, #104	; 0x68
 800070a:	e7d9      	b.n	80006c0 <__sfp+0x1c>
 800070c:	2104      	movs	r1, #4
 800070e:	4638      	mov	r0, r7
 8000710:	f7ff ff62 	bl	80005d8 <__sfmoreglue>
 8000714:	4604      	mov	r4, r0
 8000716:	6030      	str	r0, [r6, #0]
 8000718:	2800      	cmp	r0, #0
 800071a:	d1d5      	bne.n	80006c8 <__sfp+0x24>
 800071c:	f7ff ff78 	bl	8000610 <__sfp_lock_release>
 8000720:	230c      	movs	r3, #12
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	e7ee      	b.n	8000704 <__sfp+0x60>
 8000726:	bf00      	nop
 8000728:	080014a8 	.word	0x080014a8
 800072c:	ffff0001 	.word	0xffff0001

08000730 <_fwalk_reent>:
 8000730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000734:	4606      	mov	r6, r0
 8000736:	4688      	mov	r8, r1
 8000738:	2700      	movs	r7, #0
 800073a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800073e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000742:	f1b9 0901 	subs.w	r9, r9, #1
 8000746:	d505      	bpl.n	8000754 <_fwalk_reent+0x24>
 8000748:	6824      	ldr	r4, [r4, #0]
 800074a:	2c00      	cmp	r4, #0
 800074c:	d1f7      	bne.n	800073e <_fwalk_reent+0xe>
 800074e:	4638      	mov	r0, r7
 8000750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000754:	89ab      	ldrh	r3, [r5, #12]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d907      	bls.n	800076a <_fwalk_reent+0x3a>
 800075a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800075e:	3301      	adds	r3, #1
 8000760:	d003      	beq.n	800076a <_fwalk_reent+0x3a>
 8000762:	4629      	mov	r1, r5
 8000764:	4630      	mov	r0, r6
 8000766:	47c0      	blx	r8
 8000768:	4307      	orrs	r7, r0
 800076a:	3568      	adds	r5, #104	; 0x68
 800076c:	e7e9      	b.n	8000742 <_fwalk_reent+0x12>

0800076e <__retarget_lock_init_recursive>:
 800076e:	4770      	bx	lr

08000770 <__retarget_lock_acquire_recursive>:
 8000770:	4770      	bx	lr

08000772 <__retarget_lock_release_recursive>:
 8000772:	4770      	bx	lr

08000774 <sbrk_aligned>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4e0e      	ldr	r6, [pc, #56]	; (80007b0 <sbrk_aligned+0x3c>)
 8000778:	460c      	mov	r4, r1
 800077a:	6831      	ldr	r1, [r6, #0]
 800077c:	4605      	mov	r5, r0
 800077e:	b911      	cbnz	r1, 8000786 <sbrk_aligned+0x12>
 8000780:	f000 fb7a 	bl	8000e78 <_sbrk_r>
 8000784:	6030      	str	r0, [r6, #0]
 8000786:	4621      	mov	r1, r4
 8000788:	4628      	mov	r0, r5
 800078a:	f000 fb75 	bl	8000e78 <_sbrk_r>
 800078e:	1c43      	adds	r3, r0, #1
 8000790:	d00a      	beq.n	80007a8 <sbrk_aligned+0x34>
 8000792:	1cc4      	adds	r4, r0, #3
 8000794:	f024 0403 	bic.w	r4, r4, #3
 8000798:	42a0      	cmp	r0, r4
 800079a:	d007      	beq.n	80007ac <sbrk_aligned+0x38>
 800079c:	1a21      	subs	r1, r4, r0
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 fb6a 	bl	8000e78 <_sbrk_r>
 80007a4:	3001      	adds	r0, #1
 80007a6:	d101      	bne.n	80007ac <sbrk_aligned+0x38>
 80007a8:	f04f 34ff 	mov.w	r4, #4294967295
 80007ac:	4620      	mov	r0, r4
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	2000008c 	.word	0x2000008c

080007b4 <_malloc_r>:
 80007b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007b8:	1ccd      	adds	r5, r1, #3
 80007ba:	f025 0503 	bic.w	r5, r5, #3
 80007be:	3508      	adds	r5, #8
 80007c0:	2d0c      	cmp	r5, #12
 80007c2:	bf38      	it	cc
 80007c4:	250c      	movcc	r5, #12
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	4607      	mov	r7, r0
 80007ca:	db01      	blt.n	80007d0 <_malloc_r+0x1c>
 80007cc:	42a9      	cmp	r1, r5
 80007ce:	d905      	bls.n	80007dc <_malloc_r+0x28>
 80007d0:	230c      	movs	r3, #12
 80007d2:	2600      	movs	r6, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4630      	mov	r0, r6
 80007d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007dc:	4e2e      	ldr	r6, [pc, #184]	; (8000898 <_malloc_r+0xe4>)
 80007de:	f000 fdc5 	bl	800136c <__malloc_lock>
 80007e2:	6833      	ldr	r3, [r6, #0]
 80007e4:	461c      	mov	r4, r3
 80007e6:	bb34      	cbnz	r4, 8000836 <_malloc_r+0x82>
 80007e8:	4629      	mov	r1, r5
 80007ea:	4638      	mov	r0, r7
 80007ec:	f7ff ffc2 	bl	8000774 <sbrk_aligned>
 80007f0:	1c43      	adds	r3, r0, #1
 80007f2:	4604      	mov	r4, r0
 80007f4:	d14d      	bne.n	8000892 <_malloc_r+0xde>
 80007f6:	6834      	ldr	r4, [r6, #0]
 80007f8:	4626      	mov	r6, r4
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d140      	bne.n	8000880 <_malloc_r+0xcc>
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	4631      	mov	r1, r6
 8000802:	4638      	mov	r0, r7
 8000804:	eb04 0803 	add.w	r8, r4, r3
 8000808:	f000 fb36 	bl	8000e78 <_sbrk_r>
 800080c:	4580      	cmp	r8, r0
 800080e:	d13a      	bne.n	8000886 <_malloc_r+0xd2>
 8000810:	6821      	ldr	r1, [r4, #0]
 8000812:	3503      	adds	r5, #3
 8000814:	1a6d      	subs	r5, r5, r1
 8000816:	f025 0503 	bic.w	r5, r5, #3
 800081a:	3508      	adds	r5, #8
 800081c:	2d0c      	cmp	r5, #12
 800081e:	bf38      	it	cc
 8000820:	250c      	movcc	r5, #12
 8000822:	4638      	mov	r0, r7
 8000824:	4629      	mov	r1, r5
 8000826:	f7ff ffa5 	bl	8000774 <sbrk_aligned>
 800082a:	3001      	adds	r0, #1
 800082c:	d02b      	beq.n	8000886 <_malloc_r+0xd2>
 800082e:	6823      	ldr	r3, [r4, #0]
 8000830:	442b      	add	r3, r5
 8000832:	6023      	str	r3, [r4, #0]
 8000834:	e00e      	b.n	8000854 <_malloc_r+0xa0>
 8000836:	6822      	ldr	r2, [r4, #0]
 8000838:	1b52      	subs	r2, r2, r5
 800083a:	d41e      	bmi.n	800087a <_malloc_r+0xc6>
 800083c:	2a0b      	cmp	r2, #11
 800083e:	d916      	bls.n	800086e <_malloc_r+0xba>
 8000840:	1961      	adds	r1, r4, r5
 8000842:	42a3      	cmp	r3, r4
 8000844:	6025      	str	r5, [r4, #0]
 8000846:	bf18      	it	ne
 8000848:	6059      	strne	r1, [r3, #4]
 800084a:	6863      	ldr	r3, [r4, #4]
 800084c:	bf08      	it	eq
 800084e:	6031      	streq	r1, [r6, #0]
 8000850:	5162      	str	r2, [r4, r5]
 8000852:	604b      	str	r3, [r1, #4]
 8000854:	4638      	mov	r0, r7
 8000856:	f104 060b 	add.w	r6, r4, #11
 800085a:	f000 fd8d 	bl	8001378 <__malloc_unlock>
 800085e:	f026 0607 	bic.w	r6, r6, #7
 8000862:	1d23      	adds	r3, r4, #4
 8000864:	1af2      	subs	r2, r6, r3
 8000866:	d0b6      	beq.n	80007d6 <_malloc_r+0x22>
 8000868:	1b9b      	subs	r3, r3, r6
 800086a:	50a3      	str	r3, [r4, r2]
 800086c:	e7b3      	b.n	80007d6 <_malloc_r+0x22>
 800086e:	6862      	ldr	r2, [r4, #4]
 8000870:	42a3      	cmp	r3, r4
 8000872:	bf0c      	ite	eq
 8000874:	6032      	streq	r2, [r6, #0]
 8000876:	605a      	strne	r2, [r3, #4]
 8000878:	e7ec      	b.n	8000854 <_malloc_r+0xa0>
 800087a:	4623      	mov	r3, r4
 800087c:	6864      	ldr	r4, [r4, #4]
 800087e:	e7b2      	b.n	80007e6 <_malloc_r+0x32>
 8000880:	4634      	mov	r4, r6
 8000882:	6876      	ldr	r6, [r6, #4]
 8000884:	e7b9      	b.n	80007fa <_malloc_r+0x46>
 8000886:	230c      	movs	r3, #12
 8000888:	4638      	mov	r0, r7
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	f000 fd74 	bl	8001378 <__malloc_unlock>
 8000890:	e7a1      	b.n	80007d6 <_malloc_r+0x22>
 8000892:	6025      	str	r5, [r4, #0]
 8000894:	e7de      	b.n	8000854 <_malloc_r+0xa0>
 8000896:	bf00      	nop
 8000898:	20000088 	.word	0x20000088

0800089c <__sfputc_r>:
 800089c:	6893      	ldr	r3, [r2, #8]
 800089e:	b410      	push	{r4}
 80008a0:	3b01      	subs	r3, #1
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	6093      	str	r3, [r2, #8]
 80008a6:	da07      	bge.n	80008b8 <__sfputc_r+0x1c>
 80008a8:	6994      	ldr	r4, [r2, #24]
 80008aa:	42a3      	cmp	r3, r4
 80008ac:	db01      	blt.n	80008b2 <__sfputc_r+0x16>
 80008ae:	290a      	cmp	r1, #10
 80008b0:	d102      	bne.n	80008b8 <__sfputc_r+0x1c>
 80008b2:	bc10      	pop	{r4}
 80008b4:	f000 bb34 	b.w	8000f20 <__swbuf_r>
 80008b8:	6813      	ldr	r3, [r2, #0]
 80008ba:	1c58      	adds	r0, r3, #1
 80008bc:	6010      	str	r0, [r2, #0]
 80008be:	7019      	strb	r1, [r3, #0]
 80008c0:	4608      	mov	r0, r1
 80008c2:	bc10      	pop	{r4}
 80008c4:	4770      	bx	lr

080008c6 <__sfputs_r>:
 80008c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c8:	4606      	mov	r6, r0
 80008ca:	460f      	mov	r7, r1
 80008cc:	4614      	mov	r4, r2
 80008ce:	18d5      	adds	r5, r2, r3
 80008d0:	42ac      	cmp	r4, r5
 80008d2:	d101      	bne.n	80008d8 <__sfputs_r+0x12>
 80008d4:	2000      	movs	r0, #0
 80008d6:	e007      	b.n	80008e8 <__sfputs_r+0x22>
 80008d8:	463a      	mov	r2, r7
 80008da:	4630      	mov	r0, r6
 80008dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008e0:	f7ff ffdc 	bl	800089c <__sfputc_r>
 80008e4:	1c43      	adds	r3, r0, #1
 80008e6:	d1f3      	bne.n	80008d0 <__sfputs_r+0xa>
 80008e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080008ec <_vfiprintf_r>:
 80008ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008f0:	460d      	mov	r5, r1
 80008f2:	4614      	mov	r4, r2
 80008f4:	4698      	mov	r8, r3
 80008f6:	4606      	mov	r6, r0
 80008f8:	b09d      	sub	sp, #116	; 0x74
 80008fa:	b118      	cbz	r0, 8000904 <_vfiprintf_r+0x18>
 80008fc:	6983      	ldr	r3, [r0, #24]
 80008fe:	b90b      	cbnz	r3, 8000904 <_vfiprintf_r+0x18>
 8000900:	f7ff fe98 	bl	8000634 <__sinit>
 8000904:	4b89      	ldr	r3, [pc, #548]	; (8000b2c <_vfiprintf_r+0x240>)
 8000906:	429d      	cmp	r5, r3
 8000908:	d11b      	bne.n	8000942 <_vfiprintf_r+0x56>
 800090a:	6875      	ldr	r5, [r6, #4]
 800090c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800090e:	07d9      	lsls	r1, r3, #31
 8000910:	d405      	bmi.n	800091e <_vfiprintf_r+0x32>
 8000912:	89ab      	ldrh	r3, [r5, #12]
 8000914:	059a      	lsls	r2, r3, #22
 8000916:	d402      	bmi.n	800091e <_vfiprintf_r+0x32>
 8000918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800091a:	f7ff ff29 	bl	8000770 <__retarget_lock_acquire_recursive>
 800091e:	89ab      	ldrh	r3, [r5, #12]
 8000920:	071b      	lsls	r3, r3, #28
 8000922:	d501      	bpl.n	8000928 <_vfiprintf_r+0x3c>
 8000924:	692b      	ldr	r3, [r5, #16]
 8000926:	b9eb      	cbnz	r3, 8000964 <_vfiprintf_r+0x78>
 8000928:	4629      	mov	r1, r5
 800092a:	4630      	mov	r0, r6
 800092c:	f000 fb5c 	bl	8000fe8 <__swsetup_r>
 8000930:	b1c0      	cbz	r0, 8000964 <_vfiprintf_r+0x78>
 8000932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000934:	07dc      	lsls	r4, r3, #31
 8000936:	d50e      	bpl.n	8000956 <_vfiprintf_r+0x6a>
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	b01d      	add	sp, #116	; 0x74
 800093e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000942:	4b7b      	ldr	r3, [pc, #492]	; (8000b30 <_vfiprintf_r+0x244>)
 8000944:	429d      	cmp	r5, r3
 8000946:	d101      	bne.n	800094c <_vfiprintf_r+0x60>
 8000948:	68b5      	ldr	r5, [r6, #8]
 800094a:	e7df      	b.n	800090c <_vfiprintf_r+0x20>
 800094c:	4b79      	ldr	r3, [pc, #484]	; (8000b34 <_vfiprintf_r+0x248>)
 800094e:	429d      	cmp	r5, r3
 8000950:	bf08      	it	eq
 8000952:	68f5      	ldreq	r5, [r6, #12]
 8000954:	e7da      	b.n	800090c <_vfiprintf_r+0x20>
 8000956:	89ab      	ldrh	r3, [r5, #12]
 8000958:	0598      	lsls	r0, r3, #22
 800095a:	d4ed      	bmi.n	8000938 <_vfiprintf_r+0x4c>
 800095c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800095e:	f7ff ff08 	bl	8000772 <__retarget_lock_release_recursive>
 8000962:	e7e9      	b.n	8000938 <_vfiprintf_r+0x4c>
 8000964:	2300      	movs	r3, #0
 8000966:	9309      	str	r3, [sp, #36]	; 0x24
 8000968:	2320      	movs	r3, #32
 800096a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800096e:	2330      	movs	r3, #48	; 0x30
 8000970:	f04f 0901 	mov.w	r9, #1
 8000974:	f8cd 800c 	str.w	r8, [sp, #12]
 8000978:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000b38 <_vfiprintf_r+0x24c>
 800097c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000980:	4623      	mov	r3, r4
 8000982:	469a      	mov	sl, r3
 8000984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000988:	b10a      	cbz	r2, 800098e <_vfiprintf_r+0xa2>
 800098a:	2a25      	cmp	r2, #37	; 0x25
 800098c:	d1f9      	bne.n	8000982 <_vfiprintf_r+0x96>
 800098e:	ebba 0b04 	subs.w	fp, sl, r4
 8000992:	d00b      	beq.n	80009ac <_vfiprintf_r+0xc0>
 8000994:	465b      	mov	r3, fp
 8000996:	4622      	mov	r2, r4
 8000998:	4629      	mov	r1, r5
 800099a:	4630      	mov	r0, r6
 800099c:	f7ff ff93 	bl	80008c6 <__sfputs_r>
 80009a0:	3001      	adds	r0, #1
 80009a2:	f000 80aa 	beq.w	8000afa <_vfiprintf_r+0x20e>
 80009a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009a8:	445a      	add	r2, fp
 80009aa:	9209      	str	r2, [sp, #36]	; 0x24
 80009ac:	f89a 3000 	ldrb.w	r3, [sl]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f000 80a2 	beq.w	8000afa <_vfiprintf_r+0x20e>
 80009b6:	2300      	movs	r3, #0
 80009b8:	f04f 32ff 	mov.w	r2, #4294967295
 80009bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009c0:	f10a 0a01 	add.w	sl, sl, #1
 80009c4:	9304      	str	r3, [sp, #16]
 80009c6:	9307      	str	r3, [sp, #28]
 80009c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80009cc:	931a      	str	r3, [sp, #104]	; 0x68
 80009ce:	4654      	mov	r4, sl
 80009d0:	2205      	movs	r2, #5
 80009d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009d6:	4858      	ldr	r0, [pc, #352]	; (8000b38 <_vfiprintf_r+0x24c>)
 80009d8:	f000 fcba 	bl	8001350 <memchr>
 80009dc:	9a04      	ldr	r2, [sp, #16]
 80009de:	b9d8      	cbnz	r0, 8000a18 <_vfiprintf_r+0x12c>
 80009e0:	06d1      	lsls	r1, r2, #27
 80009e2:	bf44      	itt	mi
 80009e4:	2320      	movmi	r3, #32
 80009e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80009ea:	0713      	lsls	r3, r2, #28
 80009ec:	bf44      	itt	mi
 80009ee:	232b      	movmi	r3, #43	; 0x2b
 80009f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80009f4:	f89a 3000 	ldrb.w	r3, [sl]
 80009f8:	2b2a      	cmp	r3, #42	; 0x2a
 80009fa:	d015      	beq.n	8000a28 <_vfiprintf_r+0x13c>
 80009fc:	4654      	mov	r4, sl
 80009fe:	2000      	movs	r0, #0
 8000a00:	f04f 0c0a 	mov.w	ip, #10
 8000a04:	9a07      	ldr	r2, [sp, #28]
 8000a06:	4621      	mov	r1, r4
 8000a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a0c:	3b30      	subs	r3, #48	; 0x30
 8000a0e:	2b09      	cmp	r3, #9
 8000a10:	d94e      	bls.n	8000ab0 <_vfiprintf_r+0x1c4>
 8000a12:	b1b0      	cbz	r0, 8000a42 <_vfiprintf_r+0x156>
 8000a14:	9207      	str	r2, [sp, #28]
 8000a16:	e014      	b.n	8000a42 <_vfiprintf_r+0x156>
 8000a18:	eba0 0308 	sub.w	r3, r0, r8
 8000a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8000a20:	4313      	orrs	r3, r2
 8000a22:	46a2      	mov	sl, r4
 8000a24:	9304      	str	r3, [sp, #16]
 8000a26:	e7d2      	b.n	80009ce <_vfiprintf_r+0xe2>
 8000a28:	9b03      	ldr	r3, [sp, #12]
 8000a2a:	1d19      	adds	r1, r3, #4
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	9103      	str	r1, [sp, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	bfbb      	ittet	lt
 8000a34:	425b      	neglt	r3, r3
 8000a36:	f042 0202 	orrlt.w	r2, r2, #2
 8000a3a:	9307      	strge	r3, [sp, #28]
 8000a3c:	9307      	strlt	r3, [sp, #28]
 8000a3e:	bfb8      	it	lt
 8000a40:	9204      	strlt	r2, [sp, #16]
 8000a42:	7823      	ldrb	r3, [r4, #0]
 8000a44:	2b2e      	cmp	r3, #46	; 0x2e
 8000a46:	d10c      	bne.n	8000a62 <_vfiprintf_r+0x176>
 8000a48:	7863      	ldrb	r3, [r4, #1]
 8000a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8000a4c:	d135      	bne.n	8000aba <_vfiprintf_r+0x1ce>
 8000a4e:	9b03      	ldr	r3, [sp, #12]
 8000a50:	3402      	adds	r4, #2
 8000a52:	1d1a      	adds	r2, r3, #4
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	9203      	str	r2, [sp, #12]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bfb8      	it	lt
 8000a5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000a60:	9305      	str	r3, [sp, #20]
 8000a62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000b3c <_vfiprintf_r+0x250>
 8000a66:	2203      	movs	r2, #3
 8000a68:	4650      	mov	r0, sl
 8000a6a:	7821      	ldrb	r1, [r4, #0]
 8000a6c:	f000 fc70 	bl	8001350 <memchr>
 8000a70:	b140      	cbz	r0, 8000a84 <_vfiprintf_r+0x198>
 8000a72:	2340      	movs	r3, #64	; 0x40
 8000a74:	eba0 000a 	sub.w	r0, r0, sl
 8000a78:	fa03 f000 	lsl.w	r0, r3, r0
 8000a7c:	9b04      	ldr	r3, [sp, #16]
 8000a7e:	3401      	adds	r4, #1
 8000a80:	4303      	orrs	r3, r0
 8000a82:	9304      	str	r3, [sp, #16]
 8000a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a88:	2206      	movs	r2, #6
 8000a8a:	482d      	ldr	r0, [pc, #180]	; (8000b40 <_vfiprintf_r+0x254>)
 8000a8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000a90:	f000 fc5e 	bl	8001350 <memchr>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d03f      	beq.n	8000b18 <_vfiprintf_r+0x22c>
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <_vfiprintf_r+0x258>)
 8000a9a:	bb1b      	cbnz	r3, 8000ae4 <_vfiprintf_r+0x1f8>
 8000a9c:	9b03      	ldr	r3, [sp, #12]
 8000a9e:	3307      	adds	r3, #7
 8000aa0:	f023 0307 	bic.w	r3, r3, #7
 8000aa4:	3308      	adds	r3, #8
 8000aa6:	9303      	str	r3, [sp, #12]
 8000aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000aaa:	443b      	add	r3, r7
 8000aac:	9309      	str	r3, [sp, #36]	; 0x24
 8000aae:	e767      	b.n	8000980 <_vfiprintf_r+0x94>
 8000ab0:	460c      	mov	r4, r1
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ab8:	e7a5      	b.n	8000a06 <_vfiprintf_r+0x11a>
 8000aba:	2300      	movs	r3, #0
 8000abc:	f04f 0c0a 	mov.w	ip, #10
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	3401      	adds	r4, #1
 8000ac4:	9305      	str	r3, [sp, #20]
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000acc:	3a30      	subs	r2, #48	; 0x30
 8000ace:	2a09      	cmp	r2, #9
 8000ad0:	d903      	bls.n	8000ada <_vfiprintf_r+0x1ee>
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0c5      	beq.n	8000a62 <_vfiprintf_r+0x176>
 8000ad6:	9105      	str	r1, [sp, #20]
 8000ad8:	e7c3      	b.n	8000a62 <_vfiprintf_r+0x176>
 8000ada:	4604      	mov	r4, r0
 8000adc:	2301      	movs	r3, #1
 8000ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ae2:	e7f0      	b.n	8000ac6 <_vfiprintf_r+0x1da>
 8000ae4:	ab03      	add	r3, sp, #12
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	462a      	mov	r2, r5
 8000aea:	4630      	mov	r0, r6
 8000aec:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <_vfiprintf_r+0x25c>)
 8000aee:	a904      	add	r1, sp, #16
 8000af0:	f3af 8000 	nop.w
 8000af4:	4607      	mov	r7, r0
 8000af6:	1c78      	adds	r0, r7, #1
 8000af8:	d1d6      	bne.n	8000aa8 <_vfiprintf_r+0x1bc>
 8000afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000afc:	07d9      	lsls	r1, r3, #31
 8000afe:	d405      	bmi.n	8000b0c <_vfiprintf_r+0x220>
 8000b00:	89ab      	ldrh	r3, [r5, #12]
 8000b02:	059a      	lsls	r2, r3, #22
 8000b04:	d402      	bmi.n	8000b0c <_vfiprintf_r+0x220>
 8000b06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b08:	f7ff fe33 	bl	8000772 <__retarget_lock_release_recursive>
 8000b0c:	89ab      	ldrh	r3, [r5, #12]
 8000b0e:	065b      	lsls	r3, r3, #25
 8000b10:	f53f af12 	bmi.w	8000938 <_vfiprintf_r+0x4c>
 8000b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b16:	e711      	b.n	800093c <_vfiprintf_r+0x50>
 8000b18:	ab03      	add	r3, sp, #12
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	462a      	mov	r2, r5
 8000b1e:	4630      	mov	r0, r6
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <_vfiprintf_r+0x25c>)
 8000b22:	a904      	add	r1, sp, #16
 8000b24:	f000 f882 	bl	8000c2c <_printf_i>
 8000b28:	e7e4      	b.n	8000af4 <_vfiprintf_r+0x208>
 8000b2a:	bf00      	nop
 8000b2c:	080014cc 	.word	0x080014cc
 8000b30:	080014ec 	.word	0x080014ec
 8000b34:	080014ac 	.word	0x080014ac
 8000b38:	0800150c 	.word	0x0800150c
 8000b3c:	08001512 	.word	0x08001512
 8000b40:	08001516 	.word	0x08001516
 8000b44:	00000000 	.word	0x00000000
 8000b48:	080008c7 	.word	0x080008c7

08000b4c <_printf_common>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	4616      	mov	r6, r2
 8000b52:	4699      	mov	r9, r3
 8000b54:	688a      	ldr	r2, [r1, #8]
 8000b56:	690b      	ldr	r3, [r1, #16]
 8000b58:	4607      	mov	r7, r0
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	bfb8      	it	lt
 8000b5e:	4613      	movlt	r3, r2
 8000b60:	6033      	str	r3, [r6, #0]
 8000b62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b66:	460c      	mov	r4, r1
 8000b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b6c:	b10a      	cbz	r2, 8000b72 <_printf_common+0x26>
 8000b6e:	3301      	adds	r3, #1
 8000b70:	6033      	str	r3, [r6, #0]
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	0699      	lsls	r1, r3, #26
 8000b76:	bf42      	ittt	mi
 8000b78:	6833      	ldrmi	r3, [r6, #0]
 8000b7a:	3302      	addmi	r3, #2
 8000b7c:	6033      	strmi	r3, [r6, #0]
 8000b7e:	6825      	ldr	r5, [r4, #0]
 8000b80:	f015 0506 	ands.w	r5, r5, #6
 8000b84:	d106      	bne.n	8000b94 <_printf_common+0x48>
 8000b86:	f104 0a19 	add.w	sl, r4, #25
 8000b8a:	68e3      	ldr	r3, [r4, #12]
 8000b8c:	6832      	ldr	r2, [r6, #0]
 8000b8e:	1a9b      	subs	r3, r3, r2
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	dc28      	bgt.n	8000be6 <_printf_common+0x9a>
 8000b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000b98:	1e13      	subs	r3, r2, #0
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	bf18      	it	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	0692      	lsls	r2, r2, #26
 8000ba2:	d42d      	bmi.n	8000c00 <_printf_common+0xb4>
 8000ba4:	4649      	mov	r1, r9
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000bac:	47c0      	blx	r8
 8000bae:	3001      	adds	r0, #1
 8000bb0:	d020      	beq.n	8000bf4 <_printf_common+0xa8>
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	68e5      	ldr	r5, [r4, #12]
 8000bb6:	f003 0306 	and.w	r3, r3, #6
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	2500      	movne	r5, #0
 8000bc0:	6832      	ldr	r2, [r6, #0]
 8000bc2:	f04f 0600 	mov.w	r6, #0
 8000bc6:	68a3      	ldr	r3, [r4, #8]
 8000bc8:	bf08      	it	eq
 8000bca:	1aad      	subeq	r5, r5, r2
 8000bcc:	6922      	ldr	r2, [r4, #16]
 8000bce:	bf08      	it	eq
 8000bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	bfc4      	itt	gt
 8000bd8:	1a9b      	subgt	r3, r3, r2
 8000bda:	18ed      	addgt	r5, r5, r3
 8000bdc:	341a      	adds	r4, #26
 8000bde:	42b5      	cmp	r5, r6
 8000be0:	d11a      	bne.n	8000c18 <_printf_common+0xcc>
 8000be2:	2000      	movs	r0, #0
 8000be4:	e008      	b.n	8000bf8 <_printf_common+0xac>
 8000be6:	2301      	movs	r3, #1
 8000be8:	4652      	mov	r2, sl
 8000bea:	4649      	mov	r1, r9
 8000bec:	4638      	mov	r0, r7
 8000bee:	47c0      	blx	r8
 8000bf0:	3001      	adds	r0, #1
 8000bf2:	d103      	bne.n	8000bfc <_printf_common+0xb0>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	3501      	adds	r5, #1
 8000bfe:	e7c4      	b.n	8000b8a <_printf_common+0x3e>
 8000c00:	2030      	movs	r0, #48	; 0x30
 8000c02:	18e1      	adds	r1, r4, r3
 8000c04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c08:	1c5a      	adds	r2, r3, #1
 8000c0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c0e:	4422      	add	r2, r4
 8000c10:	3302      	adds	r3, #2
 8000c12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c16:	e7c5      	b.n	8000ba4 <_printf_common+0x58>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	4622      	mov	r2, r4
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	4638      	mov	r0, r7
 8000c20:	47c0      	blx	r8
 8000c22:	3001      	adds	r0, #1
 8000c24:	d0e6      	beq.n	8000bf4 <_printf_common+0xa8>
 8000c26:	3601      	adds	r6, #1
 8000c28:	e7d9      	b.n	8000bde <_printf_common+0x92>
	...

08000c2c <_printf_i>:
 8000c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	7e0f      	ldrb	r7, [r1, #24]
 8000c32:	4691      	mov	r9, r2
 8000c34:	2f78      	cmp	r7, #120	; 0x78
 8000c36:	4680      	mov	r8, r0
 8000c38:	460c      	mov	r4, r1
 8000c3a:	469a      	mov	sl, r3
 8000c3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c42:	d807      	bhi.n	8000c54 <_printf_i+0x28>
 8000c44:	2f62      	cmp	r7, #98	; 0x62
 8000c46:	d80a      	bhi.n	8000c5e <_printf_i+0x32>
 8000c48:	2f00      	cmp	r7, #0
 8000c4a:	f000 80d9 	beq.w	8000e00 <_printf_i+0x1d4>
 8000c4e:	2f58      	cmp	r7, #88	; 0x58
 8000c50:	f000 80a4 	beq.w	8000d9c <_printf_i+0x170>
 8000c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c5c:	e03a      	b.n	8000cd4 <_printf_i+0xa8>
 8000c5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c62:	2b15      	cmp	r3, #21
 8000c64:	d8f6      	bhi.n	8000c54 <_printf_i+0x28>
 8000c66:	a101      	add	r1, pc, #4	; (adr r1, 8000c6c <_printf_i+0x40>)
 8000c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c6c:	08000cc5 	.word	0x08000cc5
 8000c70:	08000cd9 	.word	0x08000cd9
 8000c74:	08000c55 	.word	0x08000c55
 8000c78:	08000c55 	.word	0x08000c55
 8000c7c:	08000c55 	.word	0x08000c55
 8000c80:	08000c55 	.word	0x08000c55
 8000c84:	08000cd9 	.word	0x08000cd9
 8000c88:	08000c55 	.word	0x08000c55
 8000c8c:	08000c55 	.word	0x08000c55
 8000c90:	08000c55 	.word	0x08000c55
 8000c94:	08000c55 	.word	0x08000c55
 8000c98:	08000de7 	.word	0x08000de7
 8000c9c:	08000d09 	.word	0x08000d09
 8000ca0:	08000dc9 	.word	0x08000dc9
 8000ca4:	08000c55 	.word	0x08000c55
 8000ca8:	08000c55 	.word	0x08000c55
 8000cac:	08000e09 	.word	0x08000e09
 8000cb0:	08000c55 	.word	0x08000c55
 8000cb4:	08000d09 	.word	0x08000d09
 8000cb8:	08000c55 	.word	0x08000c55
 8000cbc:	08000c55 	.word	0x08000c55
 8000cc0:	08000dd1 	.word	0x08000dd1
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	1d1a      	adds	r2, r3, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	602a      	str	r2, [r5, #0]
 8000ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000cd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e0a4      	b.n	8000e22 <_printf_i+0x1f6>
 8000cd8:	6820      	ldr	r0, [r4, #0]
 8000cda:	6829      	ldr	r1, [r5, #0]
 8000cdc:	0606      	lsls	r6, r0, #24
 8000cde:	f101 0304 	add.w	r3, r1, #4
 8000ce2:	d50a      	bpl.n	8000cfa <_printf_i+0xce>
 8000ce4:	680e      	ldr	r6, [r1, #0]
 8000ce6:	602b      	str	r3, [r5, #0]
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	da03      	bge.n	8000cf4 <_printf_i+0xc8>
 8000cec:	232d      	movs	r3, #45	; 0x2d
 8000cee:	4276      	negs	r6, r6
 8000cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	485e      	ldr	r0, [pc, #376]	; (8000e70 <_printf_i+0x244>)
 8000cf8:	e019      	b.n	8000d2e <_printf_i+0x102>
 8000cfa:	680e      	ldr	r6, [r1, #0]
 8000cfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	bf18      	it	ne
 8000d04:	b236      	sxthne	r6, r6
 8000d06:	e7ef      	b.n	8000ce8 <_printf_i+0xbc>
 8000d08:	682b      	ldr	r3, [r5, #0]
 8000d0a:	6820      	ldr	r0, [r4, #0]
 8000d0c:	1d19      	adds	r1, r3, #4
 8000d0e:	6029      	str	r1, [r5, #0]
 8000d10:	0601      	lsls	r1, r0, #24
 8000d12:	d501      	bpl.n	8000d18 <_printf_i+0xec>
 8000d14:	681e      	ldr	r6, [r3, #0]
 8000d16:	e002      	b.n	8000d1e <_printf_i+0xf2>
 8000d18:	0646      	lsls	r6, r0, #25
 8000d1a:	d5fb      	bpl.n	8000d14 <_printf_i+0xe8>
 8000d1c:	881e      	ldrh	r6, [r3, #0]
 8000d1e:	2f6f      	cmp	r7, #111	; 0x6f
 8000d20:	bf0c      	ite	eq
 8000d22:	2308      	moveq	r3, #8
 8000d24:	230a      	movne	r3, #10
 8000d26:	4852      	ldr	r0, [pc, #328]	; (8000e70 <_printf_i+0x244>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d2e:	6865      	ldr	r5, [r4, #4]
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	bfa8      	it	ge
 8000d34:	6821      	ldrge	r1, [r4, #0]
 8000d36:	60a5      	str	r5, [r4, #8]
 8000d38:	bfa4      	itt	ge
 8000d3a:	f021 0104 	bicge.w	r1, r1, #4
 8000d3e:	6021      	strge	r1, [r4, #0]
 8000d40:	b90e      	cbnz	r6, 8000d46 <_printf_i+0x11a>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	d04d      	beq.n	8000de2 <_printf_i+0x1b6>
 8000d46:	4615      	mov	r5, r2
 8000d48:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d4c:	fb03 6711 	mls	r7, r3, r1, r6
 8000d50:	5dc7      	ldrb	r7, [r0, r7]
 8000d52:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d56:	4637      	mov	r7, r6
 8000d58:	42bb      	cmp	r3, r7
 8000d5a:	460e      	mov	r6, r1
 8000d5c:	d9f4      	bls.n	8000d48 <_printf_i+0x11c>
 8000d5e:	2b08      	cmp	r3, #8
 8000d60:	d10b      	bne.n	8000d7a <_printf_i+0x14e>
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	07de      	lsls	r6, r3, #31
 8000d66:	d508      	bpl.n	8000d7a <_printf_i+0x14e>
 8000d68:	6923      	ldr	r3, [r4, #16]
 8000d6a:	6861      	ldr	r1, [r4, #4]
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	bfde      	ittt	le
 8000d70:	2330      	movle	r3, #48	; 0x30
 8000d72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d76:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000d7a:	1b52      	subs	r2, r2, r5
 8000d7c:	6122      	str	r2, [r4, #16]
 8000d7e:	464b      	mov	r3, r9
 8000d80:	4621      	mov	r1, r4
 8000d82:	4640      	mov	r0, r8
 8000d84:	f8cd a000 	str.w	sl, [sp]
 8000d88:	aa03      	add	r2, sp, #12
 8000d8a:	f7ff fedf 	bl	8000b4c <_printf_common>
 8000d8e:	3001      	adds	r0, #1
 8000d90:	d14c      	bne.n	8000e2c <_printf_i+0x200>
 8000d92:	f04f 30ff 	mov.w	r0, #4294967295
 8000d96:	b004      	add	sp, #16
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	4834      	ldr	r0, [pc, #208]	; (8000e70 <_printf_i+0x244>)
 8000d9e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000da2:	6829      	ldr	r1, [r5, #0]
 8000da4:	6823      	ldr	r3, [r4, #0]
 8000da6:	f851 6b04 	ldr.w	r6, [r1], #4
 8000daa:	6029      	str	r1, [r5, #0]
 8000dac:	061d      	lsls	r5, r3, #24
 8000dae:	d514      	bpl.n	8000dda <_printf_i+0x1ae>
 8000db0:	07df      	lsls	r7, r3, #31
 8000db2:	bf44      	itt	mi
 8000db4:	f043 0320 	orrmi.w	r3, r3, #32
 8000db8:	6023      	strmi	r3, [r4, #0]
 8000dba:	b91e      	cbnz	r6, 8000dc4 <_printf_i+0x198>
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	f023 0320 	bic.w	r3, r3, #32
 8000dc2:	6023      	str	r3, [r4, #0]
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	e7af      	b.n	8000d28 <_printf_i+0xfc>
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6023      	str	r3, [r4, #0]
 8000dd0:	2378      	movs	r3, #120	; 0x78
 8000dd2:	4828      	ldr	r0, [pc, #160]	; (8000e74 <_printf_i+0x248>)
 8000dd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000dd8:	e7e3      	b.n	8000da2 <_printf_i+0x176>
 8000dda:	0659      	lsls	r1, r3, #25
 8000ddc:	bf48      	it	mi
 8000dde:	b2b6      	uxthmi	r6, r6
 8000de0:	e7e6      	b.n	8000db0 <_printf_i+0x184>
 8000de2:	4615      	mov	r5, r2
 8000de4:	e7bb      	b.n	8000d5e <_printf_i+0x132>
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	6826      	ldr	r6, [r4, #0]
 8000dea:	1d18      	adds	r0, r3, #4
 8000dec:	6961      	ldr	r1, [r4, #20]
 8000dee:	6028      	str	r0, [r5, #0]
 8000df0:	0635      	lsls	r5, r6, #24
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	d501      	bpl.n	8000dfa <_printf_i+0x1ce>
 8000df6:	6019      	str	r1, [r3, #0]
 8000df8:	e002      	b.n	8000e00 <_printf_i+0x1d4>
 8000dfa:	0670      	lsls	r0, r6, #25
 8000dfc:	d5fb      	bpl.n	8000df6 <_printf_i+0x1ca>
 8000dfe:	8019      	strh	r1, [r3, #0]
 8000e00:	2300      	movs	r3, #0
 8000e02:	4615      	mov	r5, r2
 8000e04:	6123      	str	r3, [r4, #16]
 8000e06:	e7ba      	b.n	8000d7e <_printf_i+0x152>
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	1d1a      	adds	r2, r3, #4
 8000e0e:	602a      	str	r2, [r5, #0]
 8000e10:	681d      	ldr	r5, [r3, #0]
 8000e12:	6862      	ldr	r2, [r4, #4]
 8000e14:	4628      	mov	r0, r5
 8000e16:	f000 fa9b 	bl	8001350 <memchr>
 8000e1a:	b108      	cbz	r0, 8000e20 <_printf_i+0x1f4>
 8000e1c:	1b40      	subs	r0, r0, r5
 8000e1e:	6060      	str	r0, [r4, #4]
 8000e20:	6863      	ldr	r3, [r4, #4]
 8000e22:	6123      	str	r3, [r4, #16]
 8000e24:	2300      	movs	r3, #0
 8000e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e2a:	e7a8      	b.n	8000d7e <_printf_i+0x152>
 8000e2c:	462a      	mov	r2, r5
 8000e2e:	4649      	mov	r1, r9
 8000e30:	4640      	mov	r0, r8
 8000e32:	6923      	ldr	r3, [r4, #16]
 8000e34:	47d0      	blx	sl
 8000e36:	3001      	adds	r0, #1
 8000e38:	d0ab      	beq.n	8000d92 <_printf_i+0x166>
 8000e3a:	6823      	ldr	r3, [r4, #0]
 8000e3c:	079b      	lsls	r3, r3, #30
 8000e3e:	d413      	bmi.n	8000e68 <_printf_i+0x23c>
 8000e40:	68e0      	ldr	r0, [r4, #12]
 8000e42:	9b03      	ldr	r3, [sp, #12]
 8000e44:	4298      	cmp	r0, r3
 8000e46:	bfb8      	it	lt
 8000e48:	4618      	movlt	r0, r3
 8000e4a:	e7a4      	b.n	8000d96 <_printf_i+0x16a>
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	4632      	mov	r2, r6
 8000e50:	4649      	mov	r1, r9
 8000e52:	4640      	mov	r0, r8
 8000e54:	47d0      	blx	sl
 8000e56:	3001      	adds	r0, #1
 8000e58:	d09b      	beq.n	8000d92 <_printf_i+0x166>
 8000e5a:	3501      	adds	r5, #1
 8000e5c:	68e3      	ldr	r3, [r4, #12]
 8000e5e:	9903      	ldr	r1, [sp, #12]
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	dcf2      	bgt.n	8000e4c <_printf_i+0x220>
 8000e66:	e7eb      	b.n	8000e40 <_printf_i+0x214>
 8000e68:	2500      	movs	r5, #0
 8000e6a:	f104 0619 	add.w	r6, r4, #25
 8000e6e:	e7f5      	b.n	8000e5c <_printf_i+0x230>
 8000e70:	0800151d 	.word	0x0800151d
 8000e74:	0800152e 	.word	0x0800152e

08000e78 <_sbrk_r>:
 8000e78:	b538      	push	{r3, r4, r5, lr}
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4d05      	ldr	r5, [pc, #20]	; (8000e94 <_sbrk_r+0x1c>)
 8000e7e:	4604      	mov	r4, r0
 8000e80:	4608      	mov	r0, r1
 8000e82:	602b      	str	r3, [r5, #0]
 8000e84:	f7ff fa64 	bl	8000350 <_sbrk>
 8000e88:	1c43      	adds	r3, r0, #1
 8000e8a:	d102      	bne.n	8000e92 <_sbrk_r+0x1a>
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	b103      	cbz	r3, 8000e92 <_sbrk_r+0x1a>
 8000e90:	6023      	str	r3, [r4, #0]
 8000e92:	bd38      	pop	{r3, r4, r5, pc}
 8000e94:	20000090 	.word	0x20000090

08000e98 <__sread>:
 8000e98:	b510      	push	{r4, lr}
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea0:	f000 fab8 	bl	8001414 <_read_r>
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	bfab      	itete	ge
 8000ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8000eac:	181b      	addge	r3, r3, r0
 8000eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000eb2:	bfac      	ite	ge
 8000eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000eb6:	81a3      	strhlt	r3, [r4, #12]
 8000eb8:	bd10      	pop	{r4, pc}

08000eba <__swrite>:
 8000eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebe:	461f      	mov	r7, r3
 8000ec0:	898b      	ldrh	r3, [r1, #12]
 8000ec2:	4605      	mov	r5, r0
 8000ec4:	05db      	lsls	r3, r3, #23
 8000ec6:	460c      	mov	r4, r1
 8000ec8:	4616      	mov	r6, r2
 8000eca:	d505      	bpl.n	8000ed8 <__swrite+0x1e>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ed4:	f000 f9c4 	bl	8001260 <_lseek_r>
 8000ed8:	89a3      	ldrh	r3, [r4, #12]
 8000eda:	4632      	mov	r2, r6
 8000edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ee0:	81a3      	strh	r3, [r4, #12]
 8000ee2:	4628      	mov	r0, r5
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eee:	f000 b869 	b.w	8000fc4 <_write_r>

08000ef2 <__sseek>:
 8000ef2:	b510      	push	{r4, lr}
 8000ef4:	460c      	mov	r4, r1
 8000ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000efa:	f000 f9b1 	bl	8001260 <_lseek_r>
 8000efe:	1c43      	adds	r3, r0, #1
 8000f00:	89a3      	ldrh	r3, [r4, #12]
 8000f02:	bf15      	itete	ne
 8000f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f0e:	81a3      	strheq	r3, [r4, #12]
 8000f10:	bf18      	it	ne
 8000f12:	81a3      	strhne	r3, [r4, #12]
 8000f14:	bd10      	pop	{r4, pc}

08000f16 <__sclose>:
 8000f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1a:	f000 b8d3 	b.w	80010c4 <_close_r>
	...

08000f20 <__swbuf_r>:
 8000f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f22:	460e      	mov	r6, r1
 8000f24:	4614      	mov	r4, r2
 8000f26:	4605      	mov	r5, r0
 8000f28:	b118      	cbz	r0, 8000f32 <__swbuf_r+0x12>
 8000f2a:	6983      	ldr	r3, [r0, #24]
 8000f2c:	b90b      	cbnz	r3, 8000f32 <__swbuf_r+0x12>
 8000f2e:	f7ff fb81 	bl	8000634 <__sinit>
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <__swbuf_r+0x98>)
 8000f34:	429c      	cmp	r4, r3
 8000f36:	d12b      	bne.n	8000f90 <__swbuf_r+0x70>
 8000f38:	686c      	ldr	r4, [r5, #4]
 8000f3a:	69a3      	ldr	r3, [r4, #24]
 8000f3c:	60a3      	str	r3, [r4, #8]
 8000f3e:	89a3      	ldrh	r3, [r4, #12]
 8000f40:	071a      	lsls	r2, r3, #28
 8000f42:	d52f      	bpl.n	8000fa4 <__swbuf_r+0x84>
 8000f44:	6923      	ldr	r3, [r4, #16]
 8000f46:	b36b      	cbz	r3, 8000fa4 <__swbuf_r+0x84>
 8000f48:	6923      	ldr	r3, [r4, #16]
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	b2f6      	uxtb	r6, r6
 8000f4e:	1ac0      	subs	r0, r0, r3
 8000f50:	6963      	ldr	r3, [r4, #20]
 8000f52:	4637      	mov	r7, r6
 8000f54:	4283      	cmp	r3, r0
 8000f56:	dc04      	bgt.n	8000f62 <__swbuf_r+0x42>
 8000f58:	4621      	mov	r1, r4
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f000 f944 	bl	80011e8 <_fflush_r>
 8000f60:	bb30      	cbnz	r0, 8000fb0 <__swbuf_r+0x90>
 8000f62:	68a3      	ldr	r3, [r4, #8]
 8000f64:	3001      	adds	r0, #1
 8000f66:	3b01      	subs	r3, #1
 8000f68:	60a3      	str	r3, [r4, #8]
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	6022      	str	r2, [r4, #0]
 8000f70:	701e      	strb	r6, [r3, #0]
 8000f72:	6963      	ldr	r3, [r4, #20]
 8000f74:	4283      	cmp	r3, r0
 8000f76:	d004      	beq.n	8000f82 <__swbuf_r+0x62>
 8000f78:	89a3      	ldrh	r3, [r4, #12]
 8000f7a:	07db      	lsls	r3, r3, #31
 8000f7c:	d506      	bpl.n	8000f8c <__swbuf_r+0x6c>
 8000f7e:	2e0a      	cmp	r6, #10
 8000f80:	d104      	bne.n	8000f8c <__swbuf_r+0x6c>
 8000f82:	4621      	mov	r1, r4
 8000f84:	4628      	mov	r0, r5
 8000f86:	f000 f92f 	bl	80011e8 <_fflush_r>
 8000f8a:	b988      	cbnz	r0, 8000fb0 <__swbuf_r+0x90>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <__swbuf_r+0x9c>)
 8000f92:	429c      	cmp	r4, r3
 8000f94:	d101      	bne.n	8000f9a <__swbuf_r+0x7a>
 8000f96:	68ac      	ldr	r4, [r5, #8]
 8000f98:	e7cf      	b.n	8000f3a <__swbuf_r+0x1a>
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <__swbuf_r+0xa0>)
 8000f9c:	429c      	cmp	r4, r3
 8000f9e:	bf08      	it	eq
 8000fa0:	68ec      	ldreq	r4, [r5, #12]
 8000fa2:	e7ca      	b.n	8000f3a <__swbuf_r+0x1a>
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	4628      	mov	r0, r5
 8000fa8:	f000 f81e 	bl	8000fe8 <__swsetup_r>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d0cb      	beq.n	8000f48 <__swbuf_r+0x28>
 8000fb0:	f04f 37ff 	mov.w	r7, #4294967295
 8000fb4:	e7ea      	b.n	8000f8c <__swbuf_r+0x6c>
 8000fb6:	bf00      	nop
 8000fb8:	080014cc 	.word	0x080014cc
 8000fbc:	080014ec 	.word	0x080014ec
 8000fc0:	080014ac 	.word	0x080014ac

08000fc4 <_write_r>:
 8000fc4:	b538      	push	{r3, r4, r5, lr}
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4d05      	ldr	r5, [pc, #20]	; (8000fe4 <_write_r+0x20>)
 8000fd0:	602a      	str	r2, [r5, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	f7ff f96f 	bl	80002b6 <_write>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_write_r+0x1e>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_write_r+0x1e>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	20000090 	.word	0x20000090

08000fe8 <__swsetup_r>:
 8000fe8:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <__swsetup_r+0xcc>)
 8000fea:	b570      	push	{r4, r5, r6, lr}
 8000fec:	681d      	ldr	r5, [r3, #0]
 8000fee:	4606      	mov	r6, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	b125      	cbz	r5, 8000ffe <__swsetup_r+0x16>
 8000ff4:	69ab      	ldr	r3, [r5, #24]
 8000ff6:	b913      	cbnz	r3, 8000ffe <__swsetup_r+0x16>
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	f7ff fb1b 	bl	8000634 <__sinit>
 8000ffe:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <__swsetup_r+0xd0>)
 8001000:	429c      	cmp	r4, r3
 8001002:	d10f      	bne.n	8001024 <__swsetup_r+0x3c>
 8001004:	686c      	ldr	r4, [r5, #4]
 8001006:	89a3      	ldrh	r3, [r4, #12]
 8001008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800100c:	0719      	lsls	r1, r3, #28
 800100e:	d42c      	bmi.n	800106a <__swsetup_r+0x82>
 8001010:	06dd      	lsls	r5, r3, #27
 8001012:	d411      	bmi.n	8001038 <__swsetup_r+0x50>
 8001014:	2309      	movs	r3, #9
 8001016:	6033      	str	r3, [r6, #0]
 8001018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	81a3      	strh	r3, [r4, #12]
 8001022:	e03e      	b.n	80010a2 <__swsetup_r+0xba>
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <__swsetup_r+0xd4>)
 8001026:	429c      	cmp	r4, r3
 8001028:	d101      	bne.n	800102e <__swsetup_r+0x46>
 800102a:	68ac      	ldr	r4, [r5, #8]
 800102c:	e7eb      	b.n	8001006 <__swsetup_r+0x1e>
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <__swsetup_r+0xd8>)
 8001030:	429c      	cmp	r4, r3
 8001032:	bf08      	it	eq
 8001034:	68ec      	ldreq	r4, [r5, #12]
 8001036:	e7e6      	b.n	8001006 <__swsetup_r+0x1e>
 8001038:	0758      	lsls	r0, r3, #29
 800103a:	d512      	bpl.n	8001062 <__swsetup_r+0x7a>
 800103c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800103e:	b141      	cbz	r1, 8001052 <__swsetup_r+0x6a>
 8001040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001044:	4299      	cmp	r1, r3
 8001046:	d002      	beq.n	800104e <__swsetup_r+0x66>
 8001048:	4630      	mov	r0, r6
 800104a:	f000 f99b 	bl	8001384 <_free_r>
 800104e:	2300      	movs	r3, #0
 8001050:	6363      	str	r3, [r4, #52]	; 0x34
 8001052:	89a3      	ldrh	r3, [r4, #12]
 8001054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001058:	81a3      	strh	r3, [r4, #12]
 800105a:	2300      	movs	r3, #0
 800105c:	6063      	str	r3, [r4, #4]
 800105e:	6923      	ldr	r3, [r4, #16]
 8001060:	6023      	str	r3, [r4, #0]
 8001062:	89a3      	ldrh	r3, [r4, #12]
 8001064:	f043 0308 	orr.w	r3, r3, #8
 8001068:	81a3      	strh	r3, [r4, #12]
 800106a:	6923      	ldr	r3, [r4, #16]
 800106c:	b94b      	cbnz	r3, 8001082 <__swsetup_r+0x9a>
 800106e:	89a3      	ldrh	r3, [r4, #12]
 8001070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001078:	d003      	beq.n	8001082 <__swsetup_r+0x9a>
 800107a:	4621      	mov	r1, r4
 800107c:	4630      	mov	r0, r6
 800107e:	f000 f927 	bl	80012d0 <__smakebuf_r>
 8001082:	89a0      	ldrh	r0, [r4, #12]
 8001084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001088:	f010 0301 	ands.w	r3, r0, #1
 800108c:	d00a      	beq.n	80010a4 <__swsetup_r+0xbc>
 800108e:	2300      	movs	r3, #0
 8001090:	60a3      	str	r3, [r4, #8]
 8001092:	6963      	ldr	r3, [r4, #20]
 8001094:	425b      	negs	r3, r3
 8001096:	61a3      	str	r3, [r4, #24]
 8001098:	6923      	ldr	r3, [r4, #16]
 800109a:	b943      	cbnz	r3, 80010ae <__swsetup_r+0xc6>
 800109c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80010a0:	d1ba      	bne.n	8001018 <__swsetup_r+0x30>
 80010a2:	bd70      	pop	{r4, r5, r6, pc}
 80010a4:	0781      	lsls	r1, r0, #30
 80010a6:	bf58      	it	pl
 80010a8:	6963      	ldrpl	r3, [r4, #20]
 80010aa:	60a3      	str	r3, [r4, #8]
 80010ac:	e7f4      	b.n	8001098 <__swsetup_r+0xb0>
 80010ae:	2000      	movs	r0, #0
 80010b0:	e7f7      	b.n	80010a2 <__swsetup_r+0xba>
 80010b2:	bf00      	nop
 80010b4:	20000000 	.word	0x20000000
 80010b8:	080014cc 	.word	0x080014cc
 80010bc:	080014ec 	.word	0x080014ec
 80010c0:	080014ac 	.word	0x080014ac

080010c4 <_close_r>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	2300      	movs	r3, #0
 80010c8:	4d05      	ldr	r5, [pc, #20]	; (80010e0 <_close_r+0x1c>)
 80010ca:	4604      	mov	r4, r0
 80010cc:	4608      	mov	r0, r1
 80010ce:	602b      	str	r3, [r5, #0]
 80010d0:	f7ff f90d 	bl	80002ee <_close>
 80010d4:	1c43      	adds	r3, r0, #1
 80010d6:	d102      	bne.n	80010de <_close_r+0x1a>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	b103      	cbz	r3, 80010de <_close_r+0x1a>
 80010dc:	6023      	str	r3, [r4, #0]
 80010de:	bd38      	pop	{r3, r4, r5, pc}
 80010e0:	20000090 	.word	0x20000090

080010e4 <__sflush_r>:
 80010e4:	898a      	ldrh	r2, [r1, #12]
 80010e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010e8:	4605      	mov	r5, r0
 80010ea:	0710      	lsls	r0, r2, #28
 80010ec:	460c      	mov	r4, r1
 80010ee:	d457      	bmi.n	80011a0 <__sflush_r+0xbc>
 80010f0:	684b      	ldr	r3, [r1, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	dc04      	bgt.n	8001100 <__sflush_r+0x1c>
 80010f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dc01      	bgt.n	8001100 <__sflush_r+0x1c>
 80010fc:	2000      	movs	r0, #0
 80010fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001102:	2e00      	cmp	r6, #0
 8001104:	d0fa      	beq.n	80010fc <__sflush_r+0x18>
 8001106:	2300      	movs	r3, #0
 8001108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800110c:	682f      	ldr	r7, [r5, #0]
 800110e:	602b      	str	r3, [r5, #0]
 8001110:	d032      	beq.n	8001178 <__sflush_r+0x94>
 8001112:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001114:	89a3      	ldrh	r3, [r4, #12]
 8001116:	075a      	lsls	r2, r3, #29
 8001118:	d505      	bpl.n	8001126 <__sflush_r+0x42>
 800111a:	6863      	ldr	r3, [r4, #4]
 800111c:	1ac0      	subs	r0, r0, r3
 800111e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001120:	b10b      	cbz	r3, 8001126 <__sflush_r+0x42>
 8001122:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001124:	1ac0      	subs	r0, r0, r3
 8001126:	2300      	movs	r3, #0
 8001128:	4602      	mov	r2, r0
 800112a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800112c:	4628      	mov	r0, r5
 800112e:	6a21      	ldr	r1, [r4, #32]
 8001130:	47b0      	blx	r6
 8001132:	1c43      	adds	r3, r0, #1
 8001134:	89a3      	ldrh	r3, [r4, #12]
 8001136:	d106      	bne.n	8001146 <__sflush_r+0x62>
 8001138:	6829      	ldr	r1, [r5, #0]
 800113a:	291d      	cmp	r1, #29
 800113c:	d82c      	bhi.n	8001198 <__sflush_r+0xb4>
 800113e:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <__sflush_r+0x100>)
 8001140:	40ca      	lsrs	r2, r1
 8001142:	07d6      	lsls	r6, r2, #31
 8001144:	d528      	bpl.n	8001198 <__sflush_r+0xb4>
 8001146:	2200      	movs	r2, #0
 8001148:	6062      	str	r2, [r4, #4]
 800114a:	6922      	ldr	r2, [r4, #16]
 800114c:	04d9      	lsls	r1, r3, #19
 800114e:	6022      	str	r2, [r4, #0]
 8001150:	d504      	bpl.n	800115c <__sflush_r+0x78>
 8001152:	1c42      	adds	r2, r0, #1
 8001154:	d101      	bne.n	800115a <__sflush_r+0x76>
 8001156:	682b      	ldr	r3, [r5, #0]
 8001158:	b903      	cbnz	r3, 800115c <__sflush_r+0x78>
 800115a:	6560      	str	r0, [r4, #84]	; 0x54
 800115c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800115e:	602f      	str	r7, [r5, #0]
 8001160:	2900      	cmp	r1, #0
 8001162:	d0cb      	beq.n	80010fc <__sflush_r+0x18>
 8001164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001168:	4299      	cmp	r1, r3
 800116a:	d002      	beq.n	8001172 <__sflush_r+0x8e>
 800116c:	4628      	mov	r0, r5
 800116e:	f000 f909 	bl	8001384 <_free_r>
 8001172:	2000      	movs	r0, #0
 8001174:	6360      	str	r0, [r4, #52]	; 0x34
 8001176:	e7c2      	b.n	80010fe <__sflush_r+0x1a>
 8001178:	6a21      	ldr	r1, [r4, #32]
 800117a:	2301      	movs	r3, #1
 800117c:	4628      	mov	r0, r5
 800117e:	47b0      	blx	r6
 8001180:	1c41      	adds	r1, r0, #1
 8001182:	d1c7      	bne.n	8001114 <__sflush_r+0x30>
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0c4      	beq.n	8001114 <__sflush_r+0x30>
 800118a:	2b1d      	cmp	r3, #29
 800118c:	d001      	beq.n	8001192 <__sflush_r+0xae>
 800118e:	2b16      	cmp	r3, #22
 8001190:	d101      	bne.n	8001196 <__sflush_r+0xb2>
 8001192:	602f      	str	r7, [r5, #0]
 8001194:	e7b2      	b.n	80010fc <__sflush_r+0x18>
 8001196:	89a3      	ldrh	r3, [r4, #12]
 8001198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119c:	81a3      	strh	r3, [r4, #12]
 800119e:	e7ae      	b.n	80010fe <__sflush_r+0x1a>
 80011a0:	690f      	ldr	r7, [r1, #16]
 80011a2:	2f00      	cmp	r7, #0
 80011a4:	d0aa      	beq.n	80010fc <__sflush_r+0x18>
 80011a6:	0793      	lsls	r3, r2, #30
 80011a8:	bf18      	it	ne
 80011aa:	2300      	movne	r3, #0
 80011ac:	680e      	ldr	r6, [r1, #0]
 80011ae:	bf08      	it	eq
 80011b0:	694b      	ldreq	r3, [r1, #20]
 80011b2:	1bf6      	subs	r6, r6, r7
 80011b4:	600f      	str	r7, [r1, #0]
 80011b6:	608b      	str	r3, [r1, #8]
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	dd9f      	ble.n	80010fc <__sflush_r+0x18>
 80011bc:	4633      	mov	r3, r6
 80011be:	463a      	mov	r2, r7
 80011c0:	4628      	mov	r0, r5
 80011c2:	6a21      	ldr	r1, [r4, #32]
 80011c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80011c8:	47e0      	blx	ip
 80011ca:	2800      	cmp	r0, #0
 80011cc:	dc06      	bgt.n	80011dc <__sflush_r+0xf8>
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d8:	81a3      	strh	r3, [r4, #12]
 80011da:	e790      	b.n	80010fe <__sflush_r+0x1a>
 80011dc:	4407      	add	r7, r0
 80011de:	1a36      	subs	r6, r6, r0
 80011e0:	e7ea      	b.n	80011b8 <__sflush_r+0xd4>
 80011e2:	bf00      	nop
 80011e4:	20400001 	.word	0x20400001

080011e8 <_fflush_r>:
 80011e8:	b538      	push	{r3, r4, r5, lr}
 80011ea:	690b      	ldr	r3, [r1, #16]
 80011ec:	4605      	mov	r5, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	b913      	cbnz	r3, 80011f8 <_fflush_r+0x10>
 80011f2:	2500      	movs	r5, #0
 80011f4:	4628      	mov	r0, r5
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
 80011f8:	b118      	cbz	r0, 8001202 <_fflush_r+0x1a>
 80011fa:	6983      	ldr	r3, [r0, #24]
 80011fc:	b90b      	cbnz	r3, 8001202 <_fflush_r+0x1a>
 80011fe:	f7ff fa19 	bl	8000634 <__sinit>
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <_fflush_r+0x6c>)
 8001204:	429c      	cmp	r4, r3
 8001206:	d11b      	bne.n	8001240 <_fflush_r+0x58>
 8001208:	686c      	ldr	r4, [r5, #4]
 800120a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0ef      	beq.n	80011f2 <_fflush_r+0xa>
 8001212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001214:	07d0      	lsls	r0, r2, #31
 8001216:	d404      	bmi.n	8001222 <_fflush_r+0x3a>
 8001218:	0599      	lsls	r1, r3, #22
 800121a:	d402      	bmi.n	8001222 <_fflush_r+0x3a>
 800121c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800121e:	f7ff faa7 	bl	8000770 <__retarget_lock_acquire_recursive>
 8001222:	4628      	mov	r0, r5
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff ff5d 	bl	80010e4 <__sflush_r>
 800122a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800122c:	4605      	mov	r5, r0
 800122e:	07da      	lsls	r2, r3, #31
 8001230:	d4e0      	bmi.n	80011f4 <_fflush_r+0xc>
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	059b      	lsls	r3, r3, #22
 8001236:	d4dd      	bmi.n	80011f4 <_fflush_r+0xc>
 8001238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800123a:	f7ff fa9a 	bl	8000772 <__retarget_lock_release_recursive>
 800123e:	e7d9      	b.n	80011f4 <_fflush_r+0xc>
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <_fflush_r+0x70>)
 8001242:	429c      	cmp	r4, r3
 8001244:	d101      	bne.n	800124a <_fflush_r+0x62>
 8001246:	68ac      	ldr	r4, [r5, #8]
 8001248:	e7df      	b.n	800120a <_fflush_r+0x22>
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <_fflush_r+0x74>)
 800124c:	429c      	cmp	r4, r3
 800124e:	bf08      	it	eq
 8001250:	68ec      	ldreq	r4, [r5, #12]
 8001252:	e7da      	b.n	800120a <_fflush_r+0x22>
 8001254:	080014cc 	.word	0x080014cc
 8001258:	080014ec 	.word	0x080014ec
 800125c:	080014ac 	.word	0x080014ac

08001260 <_lseek_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	2200      	movs	r2, #0
 800126a:	4d05      	ldr	r5, [pc, #20]	; (8001280 <_lseek_r+0x20>)
 800126c:	602a      	str	r2, [r5, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	f7ff f861 	bl	8000336 <_lseek>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d102      	bne.n	800127e <_lseek_r+0x1e>
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	b103      	cbz	r3, 800127e <_lseek_r+0x1e>
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	bd38      	pop	{r3, r4, r5, pc}
 8001280:	20000090 	.word	0x20000090

08001284 <__swhatbuf_r>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	460e      	mov	r6, r1
 8001288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800128c:	4614      	mov	r4, r2
 800128e:	2900      	cmp	r1, #0
 8001290:	461d      	mov	r5, r3
 8001292:	b096      	sub	sp, #88	; 0x58
 8001294:	da08      	bge.n	80012a8 <__swhatbuf_r+0x24>
 8001296:	2200      	movs	r2, #0
 8001298:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800129c:	602a      	str	r2, [r5, #0]
 800129e:	061a      	lsls	r2, r3, #24
 80012a0:	d410      	bmi.n	80012c4 <__swhatbuf_r+0x40>
 80012a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a6:	e00e      	b.n	80012c6 <__swhatbuf_r+0x42>
 80012a8:	466a      	mov	r2, sp
 80012aa:	f000 f8c5 	bl	8001438 <_fstat_r>
 80012ae:	2800      	cmp	r0, #0
 80012b0:	dbf1      	blt.n	8001296 <__swhatbuf_r+0x12>
 80012b2:	9a01      	ldr	r2, [sp, #4]
 80012b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80012b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80012bc:	425a      	negs	r2, r3
 80012be:	415a      	adcs	r2, r3
 80012c0:	602a      	str	r2, [r5, #0]
 80012c2:	e7ee      	b.n	80012a2 <__swhatbuf_r+0x1e>
 80012c4:	2340      	movs	r3, #64	; 0x40
 80012c6:	2000      	movs	r0, #0
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	b016      	add	sp, #88	; 0x58
 80012cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080012d0 <__smakebuf_r>:
 80012d0:	898b      	ldrh	r3, [r1, #12]
 80012d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012d4:	079d      	lsls	r5, r3, #30
 80012d6:	4606      	mov	r6, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	d507      	bpl.n	80012ec <__smakebuf_r+0x1c>
 80012dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	6123      	str	r3, [r4, #16]
 80012e4:	2301      	movs	r3, #1
 80012e6:	6163      	str	r3, [r4, #20]
 80012e8:	b002      	add	sp, #8
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
 80012ec:	466a      	mov	r2, sp
 80012ee:	ab01      	add	r3, sp, #4
 80012f0:	f7ff ffc8 	bl	8001284 <__swhatbuf_r>
 80012f4:	9900      	ldr	r1, [sp, #0]
 80012f6:	4605      	mov	r5, r0
 80012f8:	4630      	mov	r0, r6
 80012fa:	f7ff fa5b 	bl	80007b4 <_malloc_r>
 80012fe:	b948      	cbnz	r0, 8001314 <__smakebuf_r+0x44>
 8001300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001304:	059a      	lsls	r2, r3, #22
 8001306:	d4ef      	bmi.n	80012e8 <__smakebuf_r+0x18>
 8001308:	f023 0303 	bic.w	r3, r3, #3
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	81a3      	strh	r3, [r4, #12]
 8001312:	e7e3      	b.n	80012dc <__smakebuf_r+0xc>
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <__smakebuf_r+0x7c>)
 8001316:	62b3      	str	r3, [r6, #40]	; 0x28
 8001318:	89a3      	ldrh	r3, [r4, #12]
 800131a:	6020      	str	r0, [r4, #0]
 800131c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001320:	81a3      	strh	r3, [r4, #12]
 8001322:	9b00      	ldr	r3, [sp, #0]
 8001324:	6120      	str	r0, [r4, #16]
 8001326:	6163      	str	r3, [r4, #20]
 8001328:	9b01      	ldr	r3, [sp, #4]
 800132a:	b15b      	cbz	r3, 8001344 <__smakebuf_r+0x74>
 800132c:	4630      	mov	r0, r6
 800132e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001332:	f000 f893 	bl	800145c <_isatty_r>
 8001336:	b128      	cbz	r0, 8001344 <__smakebuf_r+0x74>
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	f023 0303 	bic.w	r3, r3, #3
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	81a3      	strh	r3, [r4, #12]
 8001344:	89a0      	ldrh	r0, [r4, #12]
 8001346:	4305      	orrs	r5, r0
 8001348:	81a5      	strh	r5, [r4, #12]
 800134a:	e7cd      	b.n	80012e8 <__smakebuf_r+0x18>
 800134c:	080005cd 	.word	0x080005cd

08001350 <memchr>:
 8001350:	4603      	mov	r3, r0
 8001352:	b510      	push	{r4, lr}
 8001354:	b2c9      	uxtb	r1, r1
 8001356:	4402      	add	r2, r0
 8001358:	4293      	cmp	r3, r2
 800135a:	4618      	mov	r0, r3
 800135c:	d101      	bne.n	8001362 <memchr+0x12>
 800135e:	2000      	movs	r0, #0
 8001360:	e003      	b.n	800136a <memchr+0x1a>
 8001362:	7804      	ldrb	r4, [r0, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	428c      	cmp	r4, r1
 8001368:	d1f6      	bne.n	8001358 <memchr+0x8>
 800136a:	bd10      	pop	{r4, pc}

0800136c <__malloc_lock>:
 800136c:	4801      	ldr	r0, [pc, #4]	; (8001374 <__malloc_lock+0x8>)
 800136e:	f7ff b9ff 	b.w	8000770 <__retarget_lock_acquire_recursive>
 8001372:	bf00      	nop
 8001374:	20000084 	.word	0x20000084

08001378 <__malloc_unlock>:
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <__malloc_unlock+0x8>)
 800137a:	f7ff b9fa 	b.w	8000772 <__retarget_lock_release_recursive>
 800137e:	bf00      	nop
 8001380:	20000084 	.word	0x20000084

08001384 <_free_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4605      	mov	r5, r0
 8001388:	2900      	cmp	r1, #0
 800138a:	d040      	beq.n	800140e <_free_r+0x8a>
 800138c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001390:	1f0c      	subs	r4, r1, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	bfb8      	it	lt
 8001396:	18e4      	addlt	r4, r4, r3
 8001398:	f7ff ffe8 	bl	800136c <__malloc_lock>
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <_free_r+0x8c>)
 800139e:	6813      	ldr	r3, [r2, #0]
 80013a0:	b933      	cbnz	r3, 80013b0 <_free_r+0x2c>
 80013a2:	6063      	str	r3, [r4, #4]
 80013a4:	6014      	str	r4, [r2, #0]
 80013a6:	4628      	mov	r0, r5
 80013a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80013ac:	f7ff bfe4 	b.w	8001378 <__malloc_unlock>
 80013b0:	42a3      	cmp	r3, r4
 80013b2:	d908      	bls.n	80013c6 <_free_r+0x42>
 80013b4:	6820      	ldr	r0, [r4, #0]
 80013b6:	1821      	adds	r1, r4, r0
 80013b8:	428b      	cmp	r3, r1
 80013ba:	bf01      	itttt	eq
 80013bc:	6819      	ldreq	r1, [r3, #0]
 80013be:	685b      	ldreq	r3, [r3, #4]
 80013c0:	1809      	addeq	r1, r1, r0
 80013c2:	6021      	streq	r1, [r4, #0]
 80013c4:	e7ed      	b.n	80013a2 <_free_r+0x1e>
 80013c6:	461a      	mov	r2, r3
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	b10b      	cbz	r3, 80013d0 <_free_r+0x4c>
 80013cc:	42a3      	cmp	r3, r4
 80013ce:	d9fa      	bls.n	80013c6 <_free_r+0x42>
 80013d0:	6811      	ldr	r1, [r2, #0]
 80013d2:	1850      	adds	r0, r2, r1
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	d10b      	bne.n	80013f0 <_free_r+0x6c>
 80013d8:	6820      	ldr	r0, [r4, #0]
 80013da:	4401      	add	r1, r0
 80013dc:	1850      	adds	r0, r2, r1
 80013de:	4283      	cmp	r3, r0
 80013e0:	6011      	str	r1, [r2, #0]
 80013e2:	d1e0      	bne.n	80013a6 <_free_r+0x22>
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4401      	add	r1, r0
 80013ea:	6011      	str	r1, [r2, #0]
 80013ec:	6053      	str	r3, [r2, #4]
 80013ee:	e7da      	b.n	80013a6 <_free_r+0x22>
 80013f0:	d902      	bls.n	80013f8 <_free_r+0x74>
 80013f2:	230c      	movs	r3, #12
 80013f4:	602b      	str	r3, [r5, #0]
 80013f6:	e7d6      	b.n	80013a6 <_free_r+0x22>
 80013f8:	6820      	ldr	r0, [r4, #0]
 80013fa:	1821      	adds	r1, r4, r0
 80013fc:	428b      	cmp	r3, r1
 80013fe:	bf01      	itttt	eq
 8001400:	6819      	ldreq	r1, [r3, #0]
 8001402:	685b      	ldreq	r3, [r3, #4]
 8001404:	1809      	addeq	r1, r1, r0
 8001406:	6021      	streq	r1, [r4, #0]
 8001408:	6063      	str	r3, [r4, #4]
 800140a:	6054      	str	r4, [r2, #4]
 800140c:	e7cb      	b.n	80013a6 <_free_r+0x22>
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	20000088 	.word	0x20000088

08001414 <_read_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4604      	mov	r4, r0
 8001418:	4608      	mov	r0, r1
 800141a:	4611      	mov	r1, r2
 800141c:	2200      	movs	r2, #0
 800141e:	4d05      	ldr	r5, [pc, #20]	; (8001434 <_read_r+0x20>)
 8001420:	602a      	str	r2, [r5, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	f7fe ff2a 	bl	800027c <_read>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	d102      	bne.n	8001432 <_read_r+0x1e>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	b103      	cbz	r3, 8001432 <_read_r+0x1e>
 8001430:	6023      	str	r3, [r4, #0]
 8001432:	bd38      	pop	{r3, r4, r5, pc}
 8001434:	20000090 	.word	0x20000090

08001438 <_fstat_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	2300      	movs	r3, #0
 800143c:	4d06      	ldr	r5, [pc, #24]	; (8001458 <_fstat_r+0x20>)
 800143e:	4604      	mov	r4, r0
 8001440:	4608      	mov	r0, r1
 8001442:	4611      	mov	r1, r2
 8001444:	602b      	str	r3, [r5, #0]
 8001446:	f7fe ff5d 	bl	8000304 <_fstat>
 800144a:	1c43      	adds	r3, r0, #1
 800144c:	d102      	bne.n	8001454 <_fstat_r+0x1c>
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	b103      	cbz	r3, 8001454 <_fstat_r+0x1c>
 8001452:	6023      	str	r3, [r4, #0]
 8001454:	bd38      	pop	{r3, r4, r5, pc}
 8001456:	bf00      	nop
 8001458:	20000090 	.word	0x20000090

0800145c <_isatty_r>:
 800145c:	b538      	push	{r3, r4, r5, lr}
 800145e:	2300      	movs	r3, #0
 8001460:	4d05      	ldr	r5, [pc, #20]	; (8001478 <_isatty_r+0x1c>)
 8001462:	4604      	mov	r4, r0
 8001464:	4608      	mov	r0, r1
 8001466:	602b      	str	r3, [r5, #0]
 8001468:	f7fe ff5b 	bl	8000322 <_isatty>
 800146c:	1c43      	adds	r3, r0, #1
 800146e:	d102      	bne.n	8001476 <_isatty_r+0x1a>
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	b103      	cbz	r3, 8001476 <_isatty_r+0x1a>
 8001474:	6023      	str	r3, [r4, #0]
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	20000090 	.word	0x20000090

0800147c <_init>:
 800147c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147e:	bf00      	nop
 8001480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001482:	bc08      	pop	{r3}
 8001484:	469e      	mov	lr, r3
 8001486:	4770      	bx	lr

08001488 <_fini>:
 8001488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800148a:	bf00      	nop
 800148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800148e:	bc08      	pop	{r3}
 8001490:	469e      	mov	lr, r3
 8001492:	4770      	bx	lr
