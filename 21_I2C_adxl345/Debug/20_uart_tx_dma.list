
20_uart_tx_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000450  08000450  00010458  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00010458  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000458  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000458  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000458  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009fc  00000000  00000000  00010481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000352  00000000  00000000  00010e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000111d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c7e  00000000  00000000  00011328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e11  00000000  00000000  00021fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057365  00000000  00000000  00022db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007a11c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  0007a16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000424 	.word	0x08000424

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000424 	.word	0x08000424

08000170 <main>:
#define GPIOCEN (1U<<4)
#define PIN13 (1U<<13)
#define SR_RXNE			(1U<<5)
char key;

int main(void){
 8000170:	b5b0      	push	{r4, r5, r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	char message[18] = "Hello from STM32\n\r";
 8000176:	4b0f      	ldr	r3, [pc, #60]	; (80001b4 <main+0x44>)
 8000178:	1d3c      	adds	r4, r7, #4
 800017a:	461d      	mov	r5, r3
 800017c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800017e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000180:	682b      	ldr	r3, [r5, #0]
 8000182:	8023      	strh	r3, [r4, #0]

	RCC->APB2ENR |= GPIOCEN;
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <main+0x48>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <main+0x48>)
 800018a:	f043 0310 	orr.w	r3, r3, #16
 800018e:	6193      	str	r3, [r2, #24]
	GPIOC->CRH = (((GPIOC->CRH &~(1U<<23))&~(1U<<22))|(1U<<21))&~(1U<<20);
 8000190:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <main+0x4c>)
 8000192:	685b      	ldr	r3, [r3, #4]
 8000194:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000198:	4a08      	ldr	r2, [pc, #32]	; (80001bc <main+0x4c>)
 800019a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800019e:	6053      	str	r3, [r2, #4]

	uart2_tx_init();
 80001a0:	f000 f8a4 	bl	80002ec <uart2_tx_init>
	dma1_usart_init((uint32_t) message, (uint32_t) &USART2->DR, sizeof(message));
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2212      	movs	r2, #18
 80001a8:	4905      	ldr	r1, [pc, #20]	; (80001c0 <main+0x50>)
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 f848 	bl	8000240 <dma1_usart_init>

	while(1){
 80001b0:	e7fe      	b.n	80001b0 <main+0x40>
 80001b2:	bf00      	nop
 80001b4:	0800043c 	.word	0x0800043c
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40011000 	.word	0x40011000
 80001c0:	40004404 	.word	0x40004404

080001c4 <USART2_callback>:
	}

}

static void USART2_callback(void){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	GPIOC->ODR |= PIN13;
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <USART2_callback+0x18>)
 80001ca:	68db      	ldr	r3, [r3, #12]
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <USART2_callback+0x18>)
 80001ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001d2:	60d3      	str	r3, [r2, #12]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40011000 	.word	0x40011000

080001e0 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	if (DMA1->ISR & ISR_TCIF7){
 80001e4:	4b07      	ldr	r3, [pc, #28]	; (8000204 <DMA1_Channel7_IRQHandler+0x24>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d007      	beq.n	8000200 <DMA1_Channel7_IRQHandler+0x20>
		DMA1->IFCR |= IFCR_CTCIF7;
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <DMA1_Channel7_IRQHandler+0x24>)
 80001f2:	685b      	ldr	r3, [r3, #4]
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <DMA1_Channel7_IRQHandler+0x24>)
 80001f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001fa:	6053      	str	r3, [r2, #4]
		USART2_callback();
 80001fc:	f7ff ffe2 	bl	80001c4 <USART2_callback>
	}
}
 8000200:	bf00      	nop
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40020000 	.word	0x40020000

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4906      	ldr	r1, [pc, #24]	; (800023c <__NVIC_EnableIRQ+0x34>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	e000e100 	.word	0xe000e100

08000240 <dma1_usart_init>:
int __io_putchar(int ch){
	uart2_write(ch);
	return ch;
}

void dma1_usart_init(uint32_t src, uint32_t dst, uint32_t len){
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	607a      	str	r2, [r7, #4]
//	enable clock access to dma
	RCC->AHBENR |= DMA1ENR;
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <dma1_usart_init+0x9c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a22      	ldr	r2, [pc, #136]	; (80002dc <dma1_usart_init+0x9c>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6153      	str	r3, [r2, #20]
//	disable dma1 usart
	DMA1_Channel7->CCR &=~ DMA_CH_EN;
 8000258:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <dma1_usart_init+0xa0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a20      	ldr	r2, [pc, #128]	; (80002e0 <dma1_usart_init+0xa0>)
 800025e:	f023 0301 	bic.w	r3, r3, #1
 8000262:	6013      	str	r3, [r2, #0]
	while(DMA1_Channel7->CCR & DMA_CH_EN);
 8000264:	bf00      	nop
 8000266:	4b1e      	ldr	r3, [pc, #120]	; (80002e0 <dma1_usart_init+0xa0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d1f9      	bne.n	8000266 <dma1_usart_init+0x26>
//	Clear all interrupt flags for uart
	DMA1->IFCR |= CLN_Interrupt_CH7;
 8000272:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <dma1_usart_init+0xa4>)
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	4a1b      	ldr	r2, [pc, #108]	; (80002e4 <dma1_usart_init+0xa4>)
 8000278:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800027c:	6053      	str	r3, [r2, #4]
//	Set the destination buffer
	DMA1_Channel7->CPAR = dst;
 800027e:	4a18      	ldr	r2, [pc, #96]	; (80002e0 <dma1_usart_init+0xa0>)
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	6093      	str	r3, [r2, #8]
//	Set the source buffer
	DMA1_Channel7->CMAR = src;
 8000284:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <dma1_usart_init+0xa0>)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	60d3      	str	r3, [r2, #12]
//	Set length
	DMA1_Channel7->CNDTR = len;
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <dma1_usart_init+0xa0>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	6053      	str	r3, [r2, #4]
//	Select stream usart ch7
//	??
//	Enable memory increment
	DMA1_Channel7->CCR |= DMA_MINC;
 8000290:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <dma1_usart_init+0xa0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <dma1_usart_init+0xa0>)
 8000296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800029a:	6013      	str	r3, [r2, #0]
//	Configure transfer direction memory to periph
	DMA1_Channel7->CCR |= CCR_DIR;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <dma1_usart_init+0xa0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0f      	ldr	r2, [pc, #60]	; (80002e0 <dma1_usart_init+0xa0>)
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6013      	str	r3, [r2, #0]
//	Enable transfer complete interrupt flag
	DMA1_Channel7->CCR |= CCR_TCIE;
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <dma1_usart_init+0xa0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <dma1_usart_init+0xa0>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6013      	str	r3, [r2, #0]
//	Enable direct mode and disable FIFO
//	??
//	Enable DMA1 Stream uart
	DMA1_Channel7->CCR |= DMA_CH_EN;
 80002b4:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <dma1_usart_init+0xa0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a09      	ldr	r2, [pc, #36]	; (80002e0 <dma1_usart_init+0xa0>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
//	Enable UART2 transmitter DMA
	USART2->CR3 = (USART2->CR3 | CH3_DMA_TX);
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <dma1_usart_init+0xa8>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <dma1_usart_init+0xa8>)
 80002c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ca:	6153      	str	r3, [r2, #20]
//	DMA Interrupt enable in NVIC
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002cc:	2011      	movs	r0, #17
 80002ce:	f7ff ff9b 	bl	8000208 <__NVIC_EnableIRQ>
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40020080 	.word	0x40020080
 80002e4:	40020000 	.word	0x40020000
 80002e8:	40004400 	.word	0x40004400

080002ec <uart2_tx_init>:


void uart2_tx_init(void){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	//Config uart gpio pin
	//1.Enable clock access to gpio C
	RCC->APB2ENR |= GPIOAEN; // clock enabled
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <uart2_tx_init+0x44>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <uart2_tx_init+0x44>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]

	//2.Set PA2 mode to alternate function mode
	GPIOA->CRL = (GPIOA->CRL |(1U<<9)|(1U<<8)|(1U<<11))&~(1U<<10); //output 50 mhz max
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <uart2_tx_init+0x48>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <uart2_tx_init+0x48>)
 8000306:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 800030a:	6013      	str	r3, [r2, #0]
	//by default


	//Config uart module
	//enable clock access to uart2
	RCC->APB1ENR |= USART2EN;
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <uart2_tx_init+0x44>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4a07      	ldr	r2, [pc, #28]	; (8000330 <uart2_tx_init+0x44>)
 8000312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000316:	61d3      	str	r3, [r2, #28]
	//Configure uart boudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	4906      	ldr	r1, [pc, #24]	; (8000338 <uart2_tx_init+0x4c>)
 800031e:	4807      	ldr	r0, [pc, #28]	; (800033c <uart2_tx_init+0x50>)
 8000320:	f000 f80e 	bl	8000340 <uart_set_baudrate>
	//configure transfer direction
	USART2->CR1 = CR1_UE | CR1_TE; // Transmitter enable, Enable USART
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <uart2_tx_init+0x50>)
 8000326:	f242 0208 	movw	r2, #8200	; 0x2008
 800032a:	60da      	str	r2, [r3, #12]
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	40010800 	.word	0x40010800
 8000338:	007a1200 	.word	0x007a1200
 800033c:	40004400 	.word	0x40004400

08000340 <uart_set_baudrate>:
char uart2_read(void){
	while(!(USART2->SR & SR_RXNE));
	return USART2->DR;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BoudRate){
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	60f8      	str	r0, [r7, #12]
 8000348:	60b9      	str	r1, [r7, #8]
 800034a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BoudRate);
 800034c:	6879      	ldr	r1, [r7, #4]
 800034e:	68b8      	ldr	r0, [r7, #8]
 8000350:	f000 f808 	bl	8000364 <compute_uart_div>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	609a      	str	r2, [r3, #8]
}
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate){
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	085a      	lsrs	r2, r3, #1
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	441a      	add	r2, r3
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	fbb2 f3f3 	udiv	r3, r2, r3
 800037c:	b29b      	uxth	r3, r3
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff fed9 	bl	8000170 <main>

080003be <LoopForever>:

LoopForever:
    b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC1_2_IRQHandler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	2600      	movs	r6, #0
 80003e0:	4d0c      	ldr	r5, [pc, #48]	; (8000414 <__libc_init_array+0x38>)
 80003e2:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	f000 f81a 	bl	8000424 <_init>
 80003f0:	2600      	movs	r6, #0
 80003f2:	4d0a      	ldr	r5, [pc, #40]	; (800041c <__libc_init_array+0x40>)
 80003f4:	4c0a      	ldr	r4, [pc, #40]	; (8000420 <__libc_init_array+0x44>)
 80003f6:	1b64      	subs	r4, r4, r5
 80003f8:	10a4      	asrs	r4, r4, #2
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f855 3b04 	ldr.w	r3, [r5], #4
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f855 3b04 	ldr.w	r3, [r5], #4
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	08000450 	.word	0x08000450
 8000418:	08000450 	.word	0x08000450
 800041c:	08000450 	.word	0x08000450
 8000420:	08000454 	.word	0x08000454

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
