
21_I2C_adxl345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  4 .ARM          00000000  080003bc  080003bc  000103c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003bc  080003c4  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000060f  00000000  00000000  000103ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000242  00000000  00000000  000109fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00010c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00010cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d72  00000000  00000000  00010d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014f6  00000000  00000000  00021ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000570c5  00000000  00000000  00022fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007a095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000180  00000000  00000000  0007a0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003a0 	.word	0x080003a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003a0 	.word	0x080003a0

08000170 <I2C1_init>:
#define SR1_RxNE	(1U<<6)
#define SR1_BTF		(1U<<2)

//	PB6 -> I2C1_SCL
//	PB7 -> I2C1_SDA
void I2C1_init(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
//	enable clock access to GPIOB
	RCC->APB2ENR |= APB2_GPIOB;
 8000174:	4b18      	ldr	r3, [pc, #96]	; (80001d8 <I2C1_init+0x68>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a17      	ldr	r2, [pc, #92]	; (80001d8 <I2C1_init+0x68>)
 800017a:	f043 0308 	orr.w	r3, r3, #8
 800017e:	6193      	str	r3, [r2, #24]
//	enable clock access to I2C1
	RCC->APB1ENR |= APB1_I2C1;
 8000180:	4b15      	ldr	r3, [pc, #84]	; (80001d8 <I2C1_init+0x68>)
 8000182:	69db      	ldr	r3, [r3, #28]
 8000184:	4a14      	ldr	r2, [pc, #80]	; (80001d8 <I2C1_init+0x68>)
 8000186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800018a:	61d3      	str	r3, [r2, #28]
//	set pins to output-alternate function open-drain
	GPIOB->CRL = (GPIOB->CRL | PB6_CFG | PB7_CFG);
 800018c:	4b13      	ldr	r3, [pc, #76]	; (80001dc <I2C1_init+0x6c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a12      	ldr	r2, [pc, #72]	; (80001dc <I2C1_init+0x6c>)
 8000192:	f043 436e 	orr.w	r3, r3, #3992977408	; 0xee000000
 8000196:	6013      	str	r3, [r2, #0]
//	i2c out of reset state
	I2C1->CR1 &=~ CR1_SWRST;
 8000198:	4b11      	ldr	r3, [pc, #68]	; (80001e0 <I2C1_init+0x70>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a10      	ldr	r2, [pc, #64]	; (80001e0 <I2C1_init+0x70>)
 800019e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80001a2:	6013      	str	r3, [r2, #0]
//	I2C clock conf
	I2C1->CR2 |= CR2_FREQ;
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <I2C1_init+0x70>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <I2C1_init+0x70>)
 80001aa:	f043 0302 	orr.w	r3, r3, #2
 80001ae:	6053      	str	r3, [r2, #4]
	I2C1->CCR |= I2C_100KHz;
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <I2C1_init+0x70>)
 80001b2:	69db      	ldr	r3, [r3, #28]
 80001b4:	4a0a      	ldr	r2, [pc, #40]	; (80001e0 <I2C1_init+0x70>)
 80001b6:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80001ba:	61d3      	str	r3, [r2, #28]
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 80001bc:	4b08      	ldr	r3, [pc, #32]	; (80001e0 <I2C1_init+0x70>)
 80001be:	2211      	movs	r2, #17
 80001c0:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= CR1_PE;
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <I2C1_init+0x70>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <I2C1_init+0x70>)
 80001c8:	f043 0301 	orr.w	r3, r3, #1
 80001cc:	6013      	str	r3, [r2, #0]
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40010c00 	.word	0x40010c00
 80001e0:	40005400 	.word	0x40005400

080001e4 <I2C1_burstWrite>:
	}
	while(!(I2C1->SR1 & SR1_BTF));
	I2C1->CR1 |= CR1_STOP;
}

void I2C1_burstWrite(char saddr, int n, char* data){
 80001e4:	b480      	push	{r7}
 80001e6:	b087      	sub	sp, #28
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
 80001f0:	73fb      	strb	r3, [r7, #15]
	volatile int tmp;
	while(I2C1->SR2 & SR2_BUSY);
 80001f2:	bf00      	nop
 80001f4:	4b24      	ldr	r3, [pc, #144]	; (8000288 <I2C1_burstWrite+0xa4>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f003 0302 	and.w	r3, r3, #2
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d1f9      	bne.n	80001f4 <I2C1_burstWrite+0x10>
	I2C1->CR1 |= CR1_START;
 8000200:	4b21      	ldr	r3, [pc, #132]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a20      	ldr	r2, [pc, #128]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800020a:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SB));
 800020c:	bf00      	nop
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000210:	695b      	ldr	r3, [r3, #20]
 8000212:	f003 0301 	and.w	r3, r3, #1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f9      	beq.n	800020e <I2C1_burstWrite+0x2a>
	I2C1->DR = saddr << 1;
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	005a      	lsls	r2, r3, #1
 800021e:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000220:	611a      	str	r2, [r3, #16]
	while(!(I2C1->SR1 & I2C1_ADDRF));
 8000222:	bf00      	nop
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000226:	695b      	ldr	r3, [r3, #20]
 8000228:	f003 0302 	and.w	r3, r3, #2
 800022c:	2b00      	cmp	r3, #0
 800022e:	d0f9      	beq.n	8000224 <I2C1_burstWrite+0x40>
	tmp = I2C1->SR2;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < n; i++){
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]
 800023a:	e00f      	b.n	800025c <I2C1_burstWrite+0x78>
		while(!(I2C1->SR1 & SR1_TxE));
 800023c:	bf00      	nop
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000240:	695b      	ldr	r3, [r3, #20]
 8000242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f9      	beq.n	800023e <I2C1_burstWrite+0x5a>
		I2C1->DR = *data++;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	1c5a      	adds	r2, r3, #1
 800024e:	607a      	str	r2, [r7, #4]
 8000250:	781a      	ldrb	r2, [r3, #0]
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000254:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < n; i++){
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	3301      	adds	r3, #1
 800025a:	617b      	str	r3, [r7, #20]
 800025c:	697a      	ldr	r2, [r7, #20]
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	429a      	cmp	r2, r3
 8000262:	dbeb      	blt.n	800023c <I2C1_burstWrite+0x58>
	}
	while(!(I2C1->SR1 & SR1_BTF));
 8000264:	bf00      	nop
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f003 0304 	and.w	r3, r3, #4
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f9      	beq.n	8000266 <I2C1_burstWrite+0x82>
	I2C1->CR1 |= CR1_STOP;
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a04      	ldr	r2, [pc, #16]	; (8000288 <I2C1_burstWrite+0xa4>)
 8000278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027c:	6013      	str	r3, [r2, #0]
}
 800027e:	bf00      	nop
 8000280:	371c      	adds	r7, #28
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	40005400 	.word	0x40005400

0800028c <main>:
#include <stdint.h>
#include "stm32f1xx.h"
#include "uart.h"


int main(void){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	I2C1_init();
 8000290:	f7ff ff6e 	bl	8000170 <I2C1_init>
	ssd1306_displayTest();
 8000294:	f000 f80e 	bl	80002b4 <ssd1306_displayTest>
	while(1){
 8000298:	e7fe      	b.n	8000298 <main+0xc>

0800029a <ssd1306_send>:

#define V_COMH_R	0xDB
#define V_COMH		0x40


void ssd1306_send(char* data){
 800029a:	b580      	push	{r7, lr}
 800029c:	b082      	sub	sp, #8
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
	I2C1_burstWrite(DEVID, sizeof(data), data);
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	2104      	movs	r1, #4
 80002a6:	203c      	movs	r0, #60	; 0x3c
 80002a8:	f7ff ff9c 	bl	80001e4 <I2C1_burstWrite>
}
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <ssd1306_displayTest>:

void ssd1306_displayTest(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
	char init[] = {CTL_COMMAND, DISP_OFF, CLK_R, CLK};
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <ssd1306_displayTest+0x44>)
 80002bc:	60fb      	str	r3, [r7, #12]
	ssd1306_send(init);
 80002be:	f107 030c 	add.w	r3, r7, #12
 80002c2:	4618      	mov	r0, r3
 80002c4:	f7ff ffe9 	bl	800029a <ssd1306_send>
	char start1[] = {CTL_COMMAND, V_COMH_R, V_COMH, DISP_RAM};
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <ssd1306_displayTest+0x48>)
 80002ca:	60bb      	str	r3, [r7, #8]
	ssd1306_send(start1);
 80002cc:	f107 0308 	add.w	r3, r7, #8
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ffe2 	bl	800029a <ssd1306_send>
	char start2[] = {INVERSE, No_SCROLL, DISP_ON};
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <ssd1306_displayTest+0x4c>)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	6812      	ldr	r2, [r2, #0]
 80002dc:	4611      	mov	r1, r2
 80002de:	8019      	strh	r1, [r3, #0]
 80002e0:	3302      	adds	r3, #2
 80002e2:	0c12      	lsrs	r2, r2, #16
 80002e4:	701a      	strb	r2, [r3, #0]
	ssd1306_send(start2);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffd6 	bl	800029a <ssd1306_send>
}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	80d5ae00 	.word	0x80d5ae00
 80002fc:	a440db00 	.word	0xa440db00
 8000300:	080003b8 	.word	0x080003b8

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	; (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	; (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 f811 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ffa9 	bl	800028c <main>

0800033a <LoopForever>:

LoopForever:
    b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000348:	080003c4 	.word	0x080003c4
  ldr r2, =_sbss
 800034c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000350:	2000001c 	.word	0x2000001c

08000354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC1_2_IRQHandler>
	...

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	2600      	movs	r6, #0
 800035c:	4d0c      	ldr	r5, [pc, #48]	; (8000390 <__libc_init_array+0x38>)
 800035e:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	f000 f81a 	bl	80003a0 <_init>
 800036c:	2600      	movs	r6, #0
 800036e:	4d0a      	ldr	r5, [pc, #40]	; (8000398 <__libc_init_array+0x40>)
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <__libc_init_array+0x44>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003bc 	.word	0x080003bc
 8000394:	080003bc 	.word	0x080003bc
 8000398:	080003bc 	.word	0x080003bc
 800039c:	080003c0 	.word	0x080003c0

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
