
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800034c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000055e  00000000  00000000  00010375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023e  00000000  00000000  000108d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c06  00000000  00000000  00010c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d0d  00000000  00000000  00021826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056f20  00000000  00000000  00022533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00079453  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  000794a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800032c 	.word	0x0800032c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800032c 	.word	0x0800032c

08000170 <main>:
#define GPIOCEN (1U<<4)
#define PIN13 (1U<<13)

char key;

int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= GPIOCEN;
 8000174:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <main+0x54>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <main+0x54>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6193      	str	r3, [r2, #24]
	GPIOC->CRH = (((GPIOC->CRH &~(1U<<23))&~(1U<<22))|(1U<<21))&~(1U<<20);
 8000180:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <main+0x58>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000188:	4a0f      	ldr	r2, [pc, #60]	; (80001c8 <main+0x58>)
 800018a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800018e:	6053      	str	r3, [r2, #4]

	uart2_rxtx_init();
 8000190:	f000 f81e 	bl	80001d0 <uart2_rxtx_init>

	while(1){
		key = uart2_read();
 8000194:	f000 f846 	bl	8000224 <uart2_read>
 8000198:	4603      	mov	r3, r0
 800019a:	461a      	mov	r2, r3
 800019c:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <main+0x5c>)
 800019e:	701a      	strb	r2, [r3, #0]
		if(key == '1'){
 80001a0:	4b0a      	ldr	r3, [pc, #40]	; (80001cc <main+0x5c>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b31      	cmp	r3, #49	; 0x31
 80001a6:	d106      	bne.n	80001b6 <main+0x46>
			GPIOC->ODR |= PIN13;
 80001a8:	4b07      	ldr	r3, [pc, #28]	; (80001c8 <main+0x58>)
 80001aa:	68db      	ldr	r3, [r3, #12]
 80001ac:	4a06      	ldr	r2, [pc, #24]	; (80001c8 <main+0x58>)
 80001ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001b2:	60d3      	str	r3, [r2, #12]
 80001b4:	e7ee      	b.n	8000194 <main+0x24>
		}else{
			GPIOC->ODR &= ~PIN13;
 80001b6:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <main+0x58>)
 80001b8:	68db      	ldr	r3, [r3, #12]
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <main+0x58>)
 80001bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001c0:	60d3      	str	r3, [r2, #12]
		key = uart2_read();
 80001c2:	e7e7      	b.n	8000194 <main+0x24>
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40011000 	.word	0x40011000
 80001cc:	2000001c 	.word	0x2000001c

080001d0 <uart2_rxtx_init>:
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
	//configure transfer direction
	USART2->CR1 = CR1_UE | CR1_TE; // Transmitter enable, Enable USART
}

void uart2_rxtx_init(void){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	//Config uart gpio pin
	//1.Enable clock access to gpio C
	RCC->APB2ENR |= GPIOAEN; // clock enabled
 80001d4:	4b0f      	ldr	r3, [pc, #60]	; (8000214 <uart2_rxtx_init+0x44>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <uart2_rxtx_init+0x44>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6193      	str	r3, [r2, #24]

	//2.Set PA2 mode to alternate function mode
	GPIOA->CRL = (((GPIOA->CRL |(1U<<9)|(1U<<8)|(1U<<11))&~(1U<<10))|(1U<<13)|(1U<<12)|(1U<<15))&~(1U<<14); //output 50 mhz max
 80001e0:	4b0d      	ldr	r3, [pc, #52]	; (8000218 <uart2_rxtx_init+0x48>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80001e8:	4a0b      	ldr	r2, [pc, #44]	; (8000218 <uart2_rxtx_init+0x48>)
 80001ea:	f443 433b 	orr.w	r3, r3, #47872	; 0xbb00
 80001ee:	6013      	str	r3, [r2, #0]
	//1.Set PA3 mode to alternative function
	//GPIOA->CRL = (GPIOA->CRL |(1U<<13)|(1U<<12)|(1U<<15))&~(1U<<14);

	//Config uart module
	//enable clock access to uart2
	RCC->APB1ENR |= USART2EN;
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <uart2_rxtx_init+0x44>)
 80001f2:	69db      	ldr	r3, [r3, #28]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <uart2_rxtx_init+0x44>)
 80001f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fa:	61d3      	str	r3, [r2, #28]
	//Configure uart boudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80001fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000200:	4906      	ldr	r1, [pc, #24]	; (800021c <uart2_rxtx_init+0x4c>)
 8000202:	4807      	ldr	r0, [pc, #28]	; (8000220 <uart2_rxtx_init+0x50>)
 8000204:	f000 f820 	bl	8000248 <uart_set_baudrate>
	//configure transfer direction
	USART2->CR1 = CR1_UE | CR1_TE | CR1_RE; // Transmitter enable, Enable USART
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <uart2_rxtx_init+0x50>)
 800020a:	f242 020c 	movw	r2, #8204	; 0x200c
 800020e:	60da      	str	r2, [r3, #12]
}
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	40021000 	.word	0x40021000
 8000218:	40010800 	.word	0x40010800
 800021c:	007a1200 	.word	0x007a1200
 8000220:	40004400 	.word	0x40004400

08000224 <uart2_read>:
	while(!(USART2->SR & SR_TXE));
	//Write to transmit data register
	USART2->DR = (ch & 0xFF);
}

char uart2_read(void){
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	while(!(USART2->SR & SR_RXNE));
 8000228:	bf00      	nop
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <uart2_read+0x20>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f003 0320 	and.w	r3, r3, #32
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <uart2_read+0x6>
	return USART2->DR;
 8000236:	4b03      	ldr	r3, [pc, #12]	; (8000244 <uart2_read+0x20>)
 8000238:	685b      	ldr	r3, [r3, #4]
 800023a:	b2db      	uxtb	r3, r3
}
 800023c:	4618      	mov	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	40004400 	.word	0x40004400

08000248 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BoudRate){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div(PeriphClk, BoudRate);
 8000254:	6879      	ldr	r1, [r7, #4]
 8000256:	68b8      	ldr	r0, [r7, #8]
 8000258:	f000 f808 	bl	800026c <compute_uart_div>
 800025c:	4603      	mov	r3, r0
 800025e:	461a      	mov	r2, r3
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	609a      	str	r2, [r3, #8]
}
 8000264:	bf00      	nop
 8000266:	3710      	adds	r7, #16
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <compute_uart_div>:

static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate){
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	085a      	lsrs	r2, r3, #1
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	441a      	add	r2, r3
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	fbb2 f3f3 	udiv	r3, r2, r3
 8000284:	b29b      	uxth	r3, r3
}
 8000286:	4618      	mov	r0, r3
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff55 	bl	8000170 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	20000020 	.word	0x20000020

080002e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC1_2_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	2600      	movs	r6, #0
 80002e8:	4d0c      	ldr	r5, [pc, #48]	; (800031c <__libc_init_array+0x38>)
 80002ea:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	10a4      	asrs	r4, r4, #2
 80002f0:	42a6      	cmp	r6, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	f000 f81a 	bl	800032c <_init>
 80002f8:	2600      	movs	r6, #0
 80002fa:	4d0a      	ldr	r5, [pc, #40]	; (8000324 <__libc_init_array+0x40>)
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <__libc_init_array+0x44>)
 80002fe:	1b64      	subs	r4, r4, r5
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	42a6      	cmp	r6, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f855 3b04 	ldr.w	r3, [r5], #4
 800030c:	4798      	blx	r3
 800030e:	3601      	adds	r6, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f855 3b04 	ldr.w	r3, [r5], #4
 8000316:	4798      	blx	r3
 8000318:	3601      	adds	r6, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
