
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  0800035c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  0800035c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000368  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000368  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000054d  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000174  00000000  00000000  0002057a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000206f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00020768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001037  00000000  00000000  000207b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000cb4  00000000  00000000  000217ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056f22  00000000  00000000  000224a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000793c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00079418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000344 	.word	0x08000344

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000344 	.word	0x08000344

08000170 <main>:
#include "systick.h"
#include "tim.h"

int timestamp = 1;

int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	//uart2_tx_init();
	tim2_PA0_output_compare();
 8000174:	f000 f81a 	bl	80001ac <tim2_PA0_output_compare>
	tim3_pa6_input_capture();
 8000178:	f000 f862 	bl	8000240 <tim3_pa6_input_capture>
	while(1){
		while(!(TIM3->SR & SR_CC1IF)){
 800017c:	e00a      	b.n	8000194 <main+0x24>
			timestamp = TIM3->CCR1;
 800017e:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <main+0x34>)
 8000180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000182:	461a      	mov	r2, r3
 8000184:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <main+0x38>)
 8000186:	601a      	str	r2, [r3, #0]
			TIM3->SR &=~ SR_CC1OF;
 8000188:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <main+0x34>)
 800018a:	691b      	ldr	r3, [r3, #16]
 800018c:	4a05      	ldr	r2, [pc, #20]	; (80001a4 <main+0x34>)
 800018e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000192:	6113      	str	r3, [r2, #16]
		while(!(TIM3->SR & SR_CC1IF)){
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <main+0x34>)
 8000196:	691b      	ldr	r3, [r3, #16]
 8000198:	f003 0302 	and.w	r3, r3, #2
 800019c:	2b00      	cmp	r3, #0
 800019e:	d0ee      	beq.n	800017e <main+0xe>
 80001a0:	e7f8      	b.n	8000194 <main+0x24>
 80001a2:	bf00      	nop
 80001a4:	40000400 	.word	0x40000400
 80001a8:	20000000 	.word	0x20000000

080001ac <tim2_PA0_output_compare>:
	TIM2->CNT = 0;
//	Enable timer
	TIM2->CR1 = CR1_CEN;
}

void tim2_PA0_output_compare(void){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0
//	enable clk to GPIOA
	RCC->APB2ENR |= RCC_IOPAEN;
 80001b0:	4b21      	ldr	r3, [pc, #132]	; (8000238 <tim2_PA0_output_compare+0x8c>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a20      	ldr	r2, [pc, #128]	; (8000238 <tim2_PA0_output_compare+0x8c>)
 80001b6:	f043 0304 	orr.w	r3, r3, #4
 80001ba:	6193      	str	r3, [r2, #24]
//	Set pa0 to alternate function
//	GPIOA->CRL = (GPIOA->CRL|(0x2<<2)|(0x3<<0));
	GPIOA->CRL = (GPIOA->CRL | (1U<<3)|(1U<<1)|(1U<<0))&~(1U<<2);
 80001bc:	4b1f      	ldr	r3, [pc, #124]	; (800023c <tim2_PA0_output_compare+0x90>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f023 030f 	bic.w	r3, r3, #15
 80001c4:	4a1d      	ldr	r2, [pc, #116]	; (800023c <tim2_PA0_output_compare+0x90>)
 80001c6:	f043 030b 	orr.w	r3, r3, #11
 80001ca:	6013      	str	r3, [r2, #0]
//	Set alternate function type to TIM2_CH1
//	enable clock access to TIM2
	RCC->APB1ENR |= TIM2EN;
 80001cc:	4b1a      	ldr	r3, [pc, #104]	; (8000238 <tim2_PA0_output_compare+0x8c>)
 80001ce:	69db      	ldr	r3, [r3, #28]
 80001d0:	4a19      	ldr	r2, [pc, #100]	; (8000238 <tim2_PA0_output_compare+0x8c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	61d3      	str	r3, [r2, #28]
//	Set prescaler val
	TIM2->PSC = 800 - 1; // 8MHz / 800 = 10 k
 80001d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001dc:	f240 321f 	movw	r2, #799	; 0x31f
 80001e0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->EGR |= EGR_UG;
 80001e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e6:	695b      	ldr	r3, [r3, #20]
 80001e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6153      	str	r3, [r2, #20]
//	Set autoreload val
	TIM2->ARR = 10000 - 1;
 80001f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80001fa:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10000 - 1;
 80001fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000200:	f242 720f 	movw	r2, #9999	; 0x270f
 8000204:	635a      	str	r2, [r3, #52]	; 0x34

//	Set output compare toggle mode
	TIM2->CCMR1 = CCMR1_OC1M_TOGGLE;
 8000206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020a:	2230      	movs	r2, #48	; 0x30
 800020c:	619a      	str	r2, [r3, #24]
//	Enable tim2 channel 1 (PA0)
	TIM2->CCER |= CCER_CC1E;
 800020e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6213      	str	r3, [r2, #32]
//	Clear counter
	TIM2->CNT = 0;
 800021e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000222:	2200      	movs	r2, #0
 8000224:	625a      	str	r2, [r3, #36]	; 0x24
//	Enable timer
	TIM2->CR1 = CR1_CEN;
 8000226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022a:	2201      	movs	r2, #1
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <tim3_pa6_input_capture>:

void tim3_pa6_input_capture(void){
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_IOPAEN;
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <tim3_pa6_input_capture+0x5c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a14      	ldr	r2, [pc, #80]	; (800029c <tim3_pa6_input_capture+0x5c>)
 800024a:	f043 0304 	orr.w	r3, r3, #4
 800024e:	6193      	str	r3, [r2, #24]
	//	Set pa6 to alternate function
	GPIOA->CRL = ((((GPIOA->CRL &~(1U<<26))&~(1U<<25))&~(1U<<24))|(1U<<27));
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <tim3_pa6_input_capture+0x60>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <tim3_pa6_input_capture+0x60>)
 800025a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800025e:	6013      	str	r3, [r2, #0]
	//	enable clock access to TIM3
	RCC->APB1ENR |= TIM3EN;
 8000260:	4b0e      	ldr	r3, [pc, #56]	; (800029c <tim3_pa6_input_capture+0x5c>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <tim3_pa6_input_capture+0x5c>)
 8000266:	f043 0302 	orr.w	r3, r3, #2
 800026a:	61d3      	str	r3, [r2, #28]
	//set prescaler
	TIM3->PSC = 8000 - 1; // 8MHz / 800 = 10 k
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <tim3_pa6_input_capture+0x64>)
 800026e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000272:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->EGR |= EGR_UG;
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <tim3_pa6_input_capture+0x64>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <tim3_pa6_input_capture+0x64>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6153      	str	r3, [r2, #20]
	//set CH1 to input mode
	TIM3->CCMR1 = CCER_CC1S;// 01: CC1 channel is configured as input, IC1 is mapped on TI1.
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <tim3_pa6_input_capture+0x64>)
 8000282:	2201      	movs	r2, #1
 8000284:	619a      	str	r2, [r3, #24]
	//set CH1 to capture at rising edge
	TIM3->CCER = CCER_CC1E; //1: Capture enabled.
 8000286:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <tim3_pa6_input_capture+0x64>)
 8000288:	2201      	movs	r2, #1
 800028a:	621a      	str	r2, [r3, #32]
	//Enable TIM3
	TIM3->CR1 = CR1_CEN; //1: Counter enabled
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <tim3_pa6_input_capture+0x64>)
 800028e:	2201      	movs	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000
 80002a0:	40010800 	.word	0x40010800
 80002a4:	40000400 	.word	0x40000400

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff49 	bl	8000170 <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f4:	20000020 	.word	0x20000020

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	2600      	movs	r6, #0
 8000300:	4d0c      	ldr	r5, [pc, #48]	; (8000334 <__libc_init_array+0x38>)
 8000302:	4c0d      	ldr	r4, [pc, #52]	; (8000338 <__libc_init_array+0x3c>)
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	f000 f81a 	bl	8000344 <_init>
 8000310:	2600      	movs	r6, #0
 8000312:	4d0a      	ldr	r5, [pc, #40]	; (800033c <__libc_init_array+0x40>)
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <__libc_init_array+0x44>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
