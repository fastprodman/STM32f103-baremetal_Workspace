
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000248  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  4 .ARM          00000000  08000378  08000378  00010380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000378  08000380  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800037c  0800037c  0001037c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000380  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000380  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000587  00000000  00000000  000103a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a0  00000000  00000000  00010930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001037  00000000  00000000  00010b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ccc  00000000  00000000  00011bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056f2d  00000000  00000000  0001289b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000697c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  00069818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000360 	.word	0x08000360

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000360 	.word	0x08000360

08000170 <main>:
#include "tim.h"

int timestamp = 1;
int timestamps [5];

int main(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0

	//uart2_tx_init();
	tim2_PA0_output_compare();
 8000176:	f000 f829 	bl	80001cc <tim2_PA0_output_compare>
	tim3_pa6_input_capture();
 800017a:	f000 f86f 	bl	800025c <tim3_pa6_input_capture>
	while(1){
		while(!(TIM3->SR & SR_CC1IF)){
 800017e:	e01a      	b.n	80001b6 <main+0x46>
			for(int i = 0;i<5;i++){
 8000180:	2300      	movs	r3, #0
 8000182:	607b      	str	r3, [r7, #4]
 8000184:	e014      	b.n	80001b0 <main+0x40>
				timestamps[i]= TIM3->CCR1;
 8000186:	4b0f      	ldr	r3, [pc, #60]	; (80001c4 <main+0x54>)
 8000188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800018a:	4619      	mov	r1, r3
 800018c:	4a0e      	ldr	r2, [pc, #56]	; (80001c8 <main+0x58>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				TIM3->SR &=~ SR_CC1OF;
 8000194:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <main+0x54>)
 8000196:	691b      	ldr	r3, [r3, #16]
 8000198:	4a0a      	ldr	r2, [pc, #40]	; (80001c4 <main+0x54>)
 800019a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800019e:	6113      	str	r3, [r2, #16]
				if (i > 4){
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2b04      	cmp	r3, #4
 80001a4:	dd01      	ble.n	80001aa <main+0x3a>
					i = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
			for(int i = 0;i<5;i++){
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	3301      	adds	r3, #1
 80001ae:	607b      	str	r3, [r7, #4]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2b04      	cmp	r3, #4
 80001b4:	dde7      	ble.n	8000186 <main+0x16>
		while(!(TIM3->SR & SR_CC1IF)){
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <main+0x54>)
 80001b8:	691b      	ldr	r3, [r3, #16]
 80001ba:	f003 0302 	and.w	r3, r3, #2
 80001be:	2b00      	cmp	r3, #0
 80001c0:	d0de      	beq.n	8000180 <main+0x10>
 80001c2:	e7f8      	b.n	80001b6 <main+0x46>
 80001c4:	40000400 	.word	0x40000400
 80001c8:	2000001c 	.word	0x2000001c

080001cc <tim2_PA0_output_compare>:
	TIM2->CNT = 0;
//	Enable timer
	TIM2->CR1 = CR1_CEN;
}

void tim2_PA0_output_compare(void){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
//	enable clk to GPIOA
	RCC->APB2ENR |= RCC_IOPAEN;
 80001d0:	4b20      	ldr	r3, [pc, #128]	; (8000254 <tim2_PA0_output_compare+0x88>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a1f      	ldr	r2, [pc, #124]	; (8000254 <tim2_PA0_output_compare+0x88>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6193      	str	r3, [r2, #24]
//	Set pa0 to alternate function
//	GPIOA->CRL = (GPIOA->CRL|(0x2<<2)|(0x3<<0));
	GPIOA->CRL = (GPIOA->CRL | (1U<<3)|(1U<<1)|(1U<<0))&~(1U<<2);
 80001dc:	4b1e      	ldr	r3, [pc, #120]	; (8000258 <tim2_PA0_output_compare+0x8c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f023 030f 	bic.w	r3, r3, #15
 80001e4:	4a1c      	ldr	r2, [pc, #112]	; (8000258 <tim2_PA0_output_compare+0x8c>)
 80001e6:	f043 030b 	orr.w	r3, r3, #11
 80001ea:	6013      	str	r3, [r2, #0]
//	Set alternate function type to TIM2_CH1
//	enable clock access to TIM2
	RCC->APB1ENR |= TIM2EN;
 80001ec:	4b19      	ldr	r3, [pc, #100]	; (8000254 <tim2_PA0_output_compare+0x88>)
 80001ee:	69db      	ldr	r3, [r3, #28]
 80001f0:	4a18      	ldr	r2, [pc, #96]	; (8000254 <tim2_PA0_output_compare+0x88>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	61d3      	str	r3, [r2, #28]
//	Set prescaler val
	TIM2->PSC = 80 - 1; // 8MHz / 800 = 10 k
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fc:	224f      	movs	r2, #79	; 0x4f
 80001fe:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->EGR |= EGR_UG;
 8000200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6153      	str	r3, [r2, #20]
//	Set autoreload val
	TIM2->ARR = 10000 - 1;
 8000210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000214:	f242 720f 	movw	r2, #9999	; 0x270f
 8000218:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10000 - 1;
 800021a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000222:	635a      	str	r2, [r3, #52]	; 0x34

//	Set output compare toggle mode
	TIM2->CCMR1 = CCMR1_OC1M_TOGGLE;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	2230      	movs	r2, #48	; 0x30
 800022a:	619a      	str	r2, [r3, #24]
//	Enable tim2 channel 1 (PA0)
	TIM2->CCER |= CCER_CC1E;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	6a1b      	ldr	r3, [r3, #32]
 8000232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000236:	f043 0301 	orr.w	r3, r3, #1
 800023a:	6213      	str	r3, [r2, #32]
//	Clear counter
	TIM2->CNT = 0;
 800023c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000240:	2200      	movs	r2, #0
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
//	Enable timer
	TIM2->CR1 = CR1_CEN;
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	2201      	movs	r2, #1
 800024a:	601a      	str	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40021000 	.word	0x40021000
 8000258:	40010800 	.word	0x40010800

0800025c <tim3_pa6_input_capture>:

void tim3_pa6_input_capture(void){
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_IOPAEN;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <tim3_pa6_input_capture+0x5c>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <tim3_pa6_input_capture+0x5c>)
 8000266:	f043 0304 	orr.w	r3, r3, #4
 800026a:	6193      	str	r3, [r2, #24]
	//	Set pa6 to alternate function
	GPIOA->CRL = ((((GPIOA->CRL &~(1U<<26))&~(1U<<25))&~(1U<<24))|(1U<<27));
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <tim3_pa6_input_capture+0x60>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000274:	4a11      	ldr	r2, [pc, #68]	; (80002bc <tim3_pa6_input_capture+0x60>)
 8000276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800027a:	6013      	str	r3, [r2, #0]
	//	enable clock access to TIM3
	RCC->APB1ENR |= TIM3EN;
 800027c:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <tim3_pa6_input_capture+0x5c>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <tim3_pa6_input_capture+0x5c>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	61d3      	str	r3, [r2, #28]
	//set prescaler
	TIM3->PSC = 8000 - 1; // 8MHz / 800 = 10 k
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <tim3_pa6_input_capture+0x64>)
 800028a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800028e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->EGR |= EGR_UG;
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <tim3_pa6_input_capture+0x64>)
 8000292:	695b      	ldr	r3, [r3, #20]
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <tim3_pa6_input_capture+0x64>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6153      	str	r3, [r2, #20]
	//set CH1 to input mode
	TIM3->CCMR1 = CCER_CC1S;// 01: CC1 channel is configured as input, IC1 is mapped on TI1.
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <tim3_pa6_input_capture+0x64>)
 800029e:	2201      	movs	r2, #1
 80002a0:	619a      	str	r2, [r3, #24]
	//set CH1 to capture at rising edge
	TIM3->CCER = CCER_CC1E; //1: Capture enabled.
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <tim3_pa6_input_capture+0x64>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	621a      	str	r2, [r3, #32]
	//Enable TIM3
	TIM3->CR1 = CR1_CEN; //1: Counter enabled
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <tim3_pa6_input_capture+0x64>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	601a      	str	r2, [r3, #0]
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40021000 	.word	0x40021000
 80002bc:	40010800 	.word	0x40010800
 80002c0:	40000400 	.word	0x40000400

080002c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480c      	ldr	r0, [pc, #48]	; (8000300 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <LoopForever+0xe>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <LoopForever+0x16>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f2:	f000 f811 	bl	8000318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ff3b 	bl	8000170 <main>

080002fa <LoopForever>:

LoopForever:
    b LoopForever
 80002fa:	e7fe      	b.n	80002fa <LoopForever>
  ldr   r0, =_estack
 80002fc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000304:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000308:	08000380 	.word	0x08000380
  ldr r2, =_sbss
 800030c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000310:	20000030 	.word	0x20000030

08000314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000314:	e7fe      	b.n	8000314 <ADC1_2_IRQHandler>
	...

08000318 <__libc_init_array>:
 8000318:	b570      	push	{r4, r5, r6, lr}
 800031a:	2600      	movs	r6, #0
 800031c:	4d0c      	ldr	r5, [pc, #48]	; (8000350 <__libc_init_array+0x38>)
 800031e:	4c0d      	ldr	r4, [pc, #52]	; (8000354 <__libc_init_array+0x3c>)
 8000320:	1b64      	subs	r4, r4, r5
 8000322:	10a4      	asrs	r4, r4, #2
 8000324:	42a6      	cmp	r6, r4
 8000326:	d109      	bne.n	800033c <__libc_init_array+0x24>
 8000328:	f000 f81a 	bl	8000360 <_init>
 800032c:	2600      	movs	r6, #0
 800032e:	4d0a      	ldr	r5, [pc, #40]	; (8000358 <__libc_init_array+0x40>)
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <__libc_init_array+0x44>)
 8000332:	1b64      	subs	r4, r4, r5
 8000334:	10a4      	asrs	r4, r4, #2
 8000336:	42a6      	cmp	r6, r4
 8000338:	d105      	bne.n	8000346 <__libc_init_array+0x2e>
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000340:	4798      	blx	r3
 8000342:	3601      	adds	r6, #1
 8000344:	e7ee      	b.n	8000324 <__libc_init_array+0xc>
 8000346:	f855 3b04 	ldr.w	r3, [r5], #4
 800034a:	4798      	blx	r3
 800034c:	3601      	adds	r6, #1
 800034e:	e7f2      	b.n	8000336 <__libc_init_array+0x1e>
 8000350:	08000378 	.word	0x08000378
 8000354:	08000378 	.word	0x08000378
 8000358:	08000378 	.word	0x08000378
 800035c:	0800037c 	.word	0x0800037c

08000360 <_init>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

0800036c <_fini>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr
